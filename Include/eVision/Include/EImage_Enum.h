// EImage_Enum.h: EasyImage library header file for eVision 6.7.1.0
//
// Copyright ( c) 1997-2006, Euresys. All rights reserved.
//

#ifndef __EIMAGE_ENUM_H__
#define __EIMAGE_ENUM_H__


// Arithmetic and logical operations
enum ARITH_LOGIC_OPERATIONS
{ 
  IMG_COPY, 
  IMG_INVERT, 

  IMG_ADD, 
  IMG_SUBTRACT, 
  IMG_MULTIPLY, 
  IMG_DIVIDE, 
  IMG_MODULO, 

  IMG_SHIFT_LEFT, 
  IMG_SHIFT_RIGHT, 

  IMG_SCALED_ADD,
  IMG_SCALED_SUBTRACT,
  IMG_SCALED_MULTIPLY,
  IMG_SCALED_DIVIDE,

  IMG_BITWISE_AND,
  IMG_BITWISE_OR,
  IMG_BITWISE_XOR,

  IMG_LOGICAL_AND,
  IMG_LOGICAL_OR, 
  IMG_LOGICAL_XOR, 

  IMG_MIN, 
  IMG_MAX, 

  IMG_SET_ZERO,
  IMG_SET_NON_ZERO,

  IMG_EQUAL,
  IMG_NOT_EQUAL,
  IMG_GREATER_OR_EQUAL,
  IMG_LESSER_OR_EQUAL,
  IMG_GREATER,
  IMG_LESSER,

  IMG_SAFE_ADD, 
  IMG_SAFE_SUBTRACT, 
  IMG_SAFE_MULTIPLY, 
  IMG_SAFE_DIVIDE, 

  IMG_COMPARE,

  IMG_OVERLAY,

  // + OBSOLETE
  IMG_SET,
  // - OBSOLETE

  // Aliases
  IMG_BITWISE_NOT = IMG_INVERT,
  IMG_AVERAGE = IMG_SCALED_ADD,

  // + OBSOLETE
  IMG_AND = IMG_BITWISE_AND, 
  IMG_OR = IMG_BITWISE_OR, 
  IMG_XOR = IMG_BITWISE_XOR, 
  // - OBSOLETE

  IMG_OPER_UNKNOWN  = 0xFFFFFFFF
};

// Histogram analyse options
enum IMG_HISTOGRAM_FEATURE
{ 
  IMG_MOST_FREQUENT_PIXEL_VALUE, 
  IMG_MOST_FREQUENT_PIXEL_FREQUENCY, 
  IMG_LEAST_FREQUENT_PIXEL_VALUE, 
  IMG_LEAST_FREQUENT_PIXEL_FREQUENCY, 
  IMG_SMALLEST_PIXEL_VALUE, 
  IMG_GREATEST_PIXEL_VALUE, 
  IMG_PIXEL_COUNT, 
  IMG_AVERAGE_PIXEL_VALUE, 
  IMG_PIXEL_VALUE_STD_DEV,
  IMG_HISTOGRAM_FEATURE_UNKNOWN  = 0xFFFFFFFF
};

//SMOOTH MODE
enum SMOOTH_MODE
{
  IMG_NO_SMOOTH,
  IMG_GAUSSIAN_SMOOTH_3X3,
  IMG_GAUSSIAN_SMOOTH_5X5,
  IMG_GAUSSIAN_SMOOTH_7X7,
  IMG_MEDIAN_SMOOTH
};

enum EDGE_FOLLOWING_MODE
{
  HYSTERESYS,
  SEED_GROWING
};

// Contour tracing direction
enum CONTOUR_MODE
{
  IMG_CONTOUR_CLOCKWISE, 
  IMG_CONTOUR_CLOCKWISE_ALWAYS_CLOSED,
  IMG_CONTOUR_CLOCKWISE_CONTINUE_IF_BORDER, 
  IMG_CONTOUR_ANTICLOCKWISE,
  IMG_CONTOUR_ANTICLOCKWISE_CONTINUE_IF_BORDER,
  IMG_CONTOUR_ANTICLOCKWISE_ALWAYS_CLOSED,
  IMG_CONTOUR_MODE_UNKNOWN  = 0xFFFFFFFF
};

// Contour tracing threshold mode
enum CONTOUR_THRESHOLD
{
  IMG_CONTOUR_ABOVE_THRESHOLD, 
  IMG_CONTOUR_BELOW_THRESHOLD,
  IMG_CONTOUR_THRESHOLD_UNKNOWN  = 0xFFFFFFFF
};

// Contour connexity
enum CONNEXITY
{
  IMG_CONTOUR_CONNEXITY_4, 
  IMG_CONTOUR_CONNEXITY_8,
  IMG_CONTOUR_CONNEXITY_UNKNOWN  = 0xFFFFFFFF
};

//KERNEL size
enum KERNEL_SIZE
{
  E_KERNEL_SIZE_3X3 = 1,
  E_KERNEL_SIZE_5X5,
  E_KERNEL_SIZE_7X7
};



// Predefined kernel types
enum KERNEL_TYPE
{ 
  E_WHITE_SKELET_KRNL = 1, 
  E_BLACK_SKELET_KRNL = 2, 
  E_EDGE_KRNL = 3, 
  E_SOBELX_KRNL = 4, 
  E_SOBELY_KRNL = 5, 
  E_PREWITX_KRNL = 6, 
  E_PREWITY_KRNL = 7, 
  E_LAPLACIAN4_KRNL = 8, 
  E_LAPLACIAN8_KRNL = 9, 
  E_LOWPASS1_KRNL = 10, 
  E_LOWPASS2_KRNL = 11, 
  E_LOWPASS3_KRNL = 12, 
  E_HIGHPASS1_KRNL = 13,
  E_HIGHPASS2_KRNL = 14,
  E_KRNL_UNKNOWN  = 0xFFFFFFFF
};

// Rectification modes
enum KERNEL_RECTIFIER
{
  DO_NOT_RECTIFY, 
  RECTIFY_KEEP_NEGATIVE, 
  RECTIFY_KEEP_POSITIVE, 
  RECTIFY_ABSOLUTE,
  RECTIFY_UNKNOWN  = 0xFFFFFFFF
};

// Kernel rotation modes
enum KERNEL_ROTATION
{ 
  NO_ROTATION = 0, 
  CLOCKWISE_ROTATION = 1, 
  ANTICLOCKWISE_ROTATION = 2,
  KERNEL_ROTATION_UNKNOWN  = 0xFFFFFFFF
};

// Edge transition slope
enum TRANS_SCAN_EDGE
{ 
  IMG_EDGE_DARK_TO_LIGHT = 1, 
  IMG_EDGE_LIGHT_TO_DARK = 2, 
  IMG_EDGE_ANY = IMG_EDGE_DARK_TO_LIGHT | IMG_EDGE_LIGHT_TO_DARK,
  IMG_EDGE_UNKNOWN  = 0xFFFFFFFF
};

// Automatic threshold selection mode
enum IMG_THRESHOLD_MODES
{
  IMG_ABSOLUTE_THRESHOLD = ( UINT32)~1,
  IMG_RELATIVE_THRESHOLD = ( UINT32)~2,
  IMG_MIN_RESIDUE_THRESHOLD = ( UINT32)~3,
  IMG_MAX_ENTROPY_THRESHOLD = ( UINT32)~4,
  IMG_ISODATA_THRESHOLD = ( UINT32)~5,
  IMG_LEAST_MODULUS_THRESHOLD = ( UINT32)~6,
  IMG_LEAST_SQUARE_THRESHOLD = ( UINT32)~7,
  IMG_THRESHOLD_UNKONWN  = 0xFFFFFFFF
};

// Signal to noise ratio
enum IMG_REFERENCE_NOISE
{
  IMG_NOISE_NONE,
  IMG_NOISE_SAME_AS_IMAGE,
  IMG_NOISE_SAME_AS_IMAGE_INCLUSIVE,
  IMG_NOISE_UNKNOWN  = 0xFFFFFFFF
};

enum IMG_PYRAMIDAL_REDUCTION_MODE
{
  IMG_AVERAGING,
  IMG_KEEP_MINIMUM,
  IMG_KEEP_MAXIMUM
};

#endif //__EIMAGE_ENUM_H__
