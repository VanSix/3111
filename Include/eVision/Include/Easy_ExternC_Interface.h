#ifndef __EASY_EXTERNC_INTERFACE_H__
#define __EASY_EXTERNC_INTERFACE_H__

#if defined __GNUC__
#define E_DLL0
#else
#if defined E_STATIC
#define E_DLL0
#elif defined E_DLL_EXPORT
#define E_DLL0 _declspec( dllexport )
#else
#define E_DLL0 _declspec( dllimport )
#endif
#endif //__GNUC__
#define E_DLL1


#include "Easy_Extern_C.h"
#include "Extern_C_Types.h"


#ifdef E_EXTERN_C_BUILD

extern "C"
{
  E_DLL0 int E_DLL1 global_EGetErrorText_Error_ConstString(int error, const char** retVal);
  E_DLL0 int E_DLL1 global_EOk_Error(int* retVal);
  E_DLL0 int E_DLL1 global_Resize_ROIBW8_ROIBW8(void** sourceImage, void** destinationImage);
  E_DLL0 int E_DLL1 global_Resize_ROIBW16_ROIBW16(void** sourceImage, void** destinationImage);
  E_DLL0 int E_DLL1 global_Resize_ROIC15_ROIC15(void** sourceImage, void** destinationImage);
  E_DLL0 int E_DLL1 global_Resize_ROIC16_ROIC16(void** sourceImage, void** destinationImage);
  E_DLL0 int E_DLL1 global_Resize_ROIC24_ROIC24(void** sourceImage, void** destinationImage);
  E_DLL0 int E_DLL1 global_Resize_ROIC24A_ROIC24A(void** sourceImage, void** destinationImage);
  E_DLL0 int E_DLL1 global_ToRadians_FLOAT32_FLOAT32(float angle, float* retVal);
  E_DLL0 int E_DLL1 global_FromRadians_FLOAT32_FLOAT32(float angle, float* retVal);
  E_DLL0 int E_DLL1 global_StartTiming();
  E_DLL0 int E_DLL1 global_StopTiming_INT32_INT32(int resolution, int* retVal);
  E_DLL0 int E_DLL1 global_StopTiming_INT32(int* retVal);
  E_DLL0 int E_DLL1 global_getRecursiveCopyBehavior_BOOL(int* retVal);
  E_DLL0 int E_DLL1 global_setRecursiveCopyBehavior_BOOL(int retVal);
  E_DLL0 int E_DLL1 global_getAngleUnit_AngleUnit(int* retVal);
  E_DLL0 int E_DLL1 global_setAngleUnit_AngleUnit(int retVal);
  E_DLL0 int E_DLL1 global_getGrantedLicenses_UINT32(unsigned int* retVal);
  E_DLL0 int E_DLL1 global_SetCustomerCode_ConstString(const char* userCode);
  E_DLL0 int E_DLL1 global_GetVersion_ConstString(const char** retVal);
  E_DLL0 int E_DLL1 global_getMMX_BOOL(int* retVal);
  E_DLL0 int E_DLL1 global_setMMX_BOOL(int retVal);
  E_DLL0 int E_DLL1 global_setJpegQuality_UINT32(unsigned int retVal);
  E_DLL0 int E_DLL1 global_Initialize();
  E_DLL0 int E_DLL1 global_Terminate();
  E_DLL0 int E_DLL1 ROIBW1_CopyTo_ROIBW1_BOOL(void* impl, void** destinationImage, int recursive);
  E_DLL0 int E_DLL1 ROIBW1_Draw_DrawAdapter_FLOAT32_FLOAT32(void* impl, void* context, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIBW1_Draw_DrawAdapter_FLOAT32(void* impl, void* context, float zoomX);
  E_DLL0 int E_DLL1 ROIBW1_Draw_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIBW1_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIBW1_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIBW1_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIBW1_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX);
  E_DLL0 int E_DLL1 ROIBW1_DrawFrame_DrawAdapter_FramePosition_BOOL(void* impl, void* context, int framePosition, int handles);
  E_DLL0 int E_DLL1 ROIBW1_DrawFrame_DrawAdapter_FramePosition(void* impl, void* context, int framePosition);
  E_DLL0 int E_DLL1 ROIBW1_DrawFrame_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIBW1_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, float panY, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_HitTest_INT32_INT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_HitTest_INT32_INT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_HitTest_INT32_INT32_DragHandle(void* impl, int x, int y, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIBW1_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIBW1_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIBW1_Drag_DragHandle_INT32_INT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX);
  E_DLL0 int E_DLL1 ROIBW1_Drag_DragHandle_INT32_INT32(void* impl, int handle, int x, int y);
  E_DLL0 int E_DLL1 ROIBW1_Load_ConstString_ImageFileType(void* impl, const char* pathName, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_Save_ConstString_ImageFileType(void* impl, const char* pathName, int format);
  E_DLL0 int E_DLL1 ROIBW1_Save_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 ROIBW1_SetSize_INT32_INT32(void* impl, int width, int height);
  E_DLL0 int E_DLL1 ROIBW1_SetSize_ROIBW1(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW1_SetSize_ROIBW8(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW1_SetSize_ROIBW16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW1_SetSize_ROIBW32(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW1_SetSize_ROIC24(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW1_SetSize_ROIC24A(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW1_SetSize_ROIC15(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW1_SetSize_ROIC16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW1_SetPlacement_INT32_INT32_INT32_INT32(void* impl, int originX, int originY, int width, int height);
  E_DLL0 int E_DLL1 ROIBW1_getOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_setOrgX_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW1_getOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_setOrgY_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW1_getWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_setWidth_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW1_getHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_setHeight_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW1_getTotalOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_getTotalOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_getTotalWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_getTotalHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_Attach_ROIBW1(void* impl, void** parent);
  E_DLL0 int E_DLL1 ROIBW1_Detach(void* impl);
  E_DLL0 int E_DLL1 ROIBW1_getParent_ROIBW1(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW1_getTopParent_ROIBW1(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW1_getFirstSubROI_ROIBW1(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW1_getNextSiblingROI_ROIBW1(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW1_getNextROI_ROIBW1_ROIBW1(void* impl, void** startROI, void** retVal);
  E_DLL0 int E_DLL1 ROIBW1_GetPixel_INT32_INT32_BW1(void* impl, int x, int y, void** retVal);
  E_DLL0 int E_DLL1 ROIBW1_SetPixel_BW1_INT32_INT32(void* impl, void* value, int x, int y);
  E_DLL0 int E_DLL1 ROIBW1_getColPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_getRowPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_getVoid_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_getAuthor_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW1_setAuthor_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW1_getComment_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW1_setComment_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW1_getDate_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW1_setDate_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW1_getTitle_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW1_setTitle_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW1_getColorSystem_ColorSystem(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_setColorSystem_ColorSystem(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW1_getType_ImageType(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_IsAnROI_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_SameSize_ROIBW1_INT16(void* impl, void* roi, short* retVal);
  E_DLL0 int E_DLL1 ROIBW1_getBitsPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_getPlanesPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW1_GetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* pixelWidth, float* pixelHeight, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIBW1_SetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float pixelWidth, float pixelHeight, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIBW1_SetPixelDimensions_FLOAT32_FLOAT32(void* impl, float pixelWidth, float pixelHeight);
  E_DLL0 int E_DLL1 ROIBW1_GetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* horizontalPixelPerUnits, float* verticalPixelPerUnits, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIBW1_SetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIBW1_SetResolution_FLOAT32_FLOAT32(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits);
  E_DLL0 int E_DLL1 ROIBW1_SetColorSystem(void* impl);
  E_DLL0 int E_DLL1 ROIBW1_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ROIBW1_Ctor_ROIBW1_INT32_INT32_INT32_INT32(void** impl, void** parent, int originX, int originY, int width, int height, int handle);
  E_DLL0 int E_DLL1 ROIBW1_Ctor_ROIBW1(void** impl, void* roiBW1, int handle);
  E_DLL0 int E_DLL1 ROIBW1_GetImagePointer_INT32_INT32_PixelPointer(void* impl, int x, int y, int* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ROIBW1_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ROIBW1_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ROIBW1_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ROIBW1_Dtor(void* impl);
  E_DLL0 int E_DLL1 ROIBW8_CopyTo_ROIBW8_BOOL(void* impl, void** destinationImage, int recursive);
  E_DLL0 int E_DLL1 ROIBW8_Draw_DrawAdapter_FLOAT32_FLOAT32(void* impl, void* context, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIBW8_Draw_DrawAdapter_FLOAT32(void* impl, void* context, float zoomX);
  E_DLL0 int E_DLL1 ROIBW8_Draw_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIBW8_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIBW8_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIBW8_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIBW8_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX);
  E_DLL0 int E_DLL1 ROIBW8_DrawFrame_DrawAdapter_FramePosition_BOOL(void* impl, void* context, int framePosition, int handles);
  E_DLL0 int E_DLL1 ROIBW8_DrawFrame_DrawAdapter_FramePosition(void* impl, void* context, int framePosition);
  E_DLL0 int E_DLL1 ROIBW8_DrawFrame_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIBW8_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, float panY, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_HitTest_INT32_INT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_HitTest_INT32_INT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_HitTest_INT32_INT32_DragHandle(void* impl, int x, int y, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIBW8_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIBW8_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIBW8_Drag_DragHandle_INT32_INT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX);
  E_DLL0 int E_DLL1 ROIBW8_Drag_DragHandle_INT32_INT32(void* impl, int handle, int x, int y);
  E_DLL0 int E_DLL1 ROIBW8_Load_ConstString_ImageFileType(void* impl, const char* pathName, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_Save_ConstString_ImageFileType(void* impl, const char* pathName, int format);
  E_DLL0 int E_DLL1 ROIBW8_Save_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 ROIBW8_SetSize_INT32_INT32(void* impl, int width, int height);
  E_DLL0 int E_DLL1 ROIBW8_SetSize_ROIBW1(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW8_SetSize_ROIBW8(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW8_SetSize_ROIBW16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW8_SetSize_ROIBW32(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW8_SetSize_ROIC24(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW8_SetSize_ROIC24A(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW8_SetSize_ROIC15(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW8_SetSize_ROIC16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW8_SetPlacement_INT32_INT32_INT32_INT32(void* impl, int originX, int originY, int width, int height);
  E_DLL0 int E_DLL1 ROIBW8_getOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_setOrgX_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW8_getOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_setOrgY_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW8_getWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_setWidth_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW8_getHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_setHeight_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW8_getTotalOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_getTotalOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_getTotalWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_getTotalHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_Attach_ROIBW8(void* impl, void** parent);
  E_DLL0 int E_DLL1 ROIBW8_Detach(void* impl);
  E_DLL0 int E_DLL1 ROIBW8_getParent_ROIBW8(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW8_getTopParent_ROIBW8(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW8_getFirstSubROI_ROIBW8(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW8_getNextSiblingROI_ROIBW8(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW8_getNextROI_ROIBW8_ROIBW8(void* impl, void** startROI, void** retVal);
  E_DLL0 int E_DLL1 ROIBW8_GetPixel_INT32_INT32_BW8(void* impl, int x, int y, void** retVal);
  E_DLL0 int E_DLL1 ROIBW8_SetPixel_BW8_INT32_INT32(void* impl, void* value, int x, int y);
  E_DLL0 int E_DLL1 ROIBW8_getColPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_getRowPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_getVoid_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_getAuthor_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW8_setAuthor_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW8_getComment_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW8_setComment_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW8_getDate_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW8_setDate_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW8_getTitle_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW8_setTitle_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW8_getColorSystem_ColorSystem(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_setColorSystem_ColorSystem(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW8_getType_ImageType(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_IsAnROI_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_SameSize_ROIBW8_INT16(void* impl, void* roi, short* retVal);
  E_DLL0 int E_DLL1 ROIBW8_getBitsPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_getPlanesPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW8_GetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* pixelWidth, float* pixelHeight, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIBW8_SetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float pixelWidth, float pixelHeight, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIBW8_SetPixelDimensions_FLOAT32_FLOAT32(void* impl, float pixelWidth, float pixelHeight);
  E_DLL0 int E_DLL1 ROIBW8_GetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* horizontalPixelPerUnits, float* verticalPixelPerUnits, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIBW8_SetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIBW8_SetResolution_FLOAT32_FLOAT32(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits);
  E_DLL0 int E_DLL1 ROIBW8_SetColorSystem(void* impl);
  E_DLL0 int E_DLL1 ROIBW8_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ROIBW8_Ctor_ROIBW8_INT32_INT32_INT32_INT32(void** impl, void** parent, int originX, int originY, int width, int height, int handle);
  E_DLL0 int E_DLL1 ROIBW8_Ctor_ROIBW8(void** impl, void* roiBW8, int handle);
  E_DLL0 int E_DLL1 ROIBW8_GetImagePointer_INT32_INT32_PixelPointer(void* impl, int x, int y, int* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ROIBW8_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ROIBW8_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ROIBW8_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ROIBW8_Dtor(void* impl);
  E_DLL0 int E_DLL1 ROIBW16_CopyTo_ROIBW16_BOOL(void* impl, void** destinationImage, int recursive);
  E_DLL0 int E_DLL1 ROIBW16_Draw_DrawAdapter_FLOAT32_FLOAT32(void* impl, void* context, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIBW16_Draw_DrawAdapter_FLOAT32(void* impl, void* context, float zoomX);
  E_DLL0 int E_DLL1 ROIBW16_Draw_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIBW16_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIBW16_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIBW16_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIBW16_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX);
  E_DLL0 int E_DLL1 ROIBW16_DrawFrame_DrawAdapter_FramePosition_BOOL(void* impl, void* context, int framePosition, int handles);
  E_DLL0 int E_DLL1 ROIBW16_DrawFrame_DrawAdapter_FramePosition(void* impl, void* context, int framePosition);
  E_DLL0 int E_DLL1 ROIBW16_DrawFrame_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIBW16_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, float panY, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_HitTest_INT32_INT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_HitTest_INT32_INT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_HitTest_INT32_INT32_DragHandle(void* impl, int x, int y, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIBW16_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIBW16_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIBW16_Drag_DragHandle_INT32_INT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX);
  E_DLL0 int E_DLL1 ROIBW16_Drag_DragHandle_INT32_INT32(void* impl, int handle, int x, int y);
  E_DLL0 int E_DLL1 ROIBW16_Load_ConstString_ImageFileType(void* impl, const char* pathName, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_Save_ConstString_ImageFileType(void* impl, const char* pathName, int format);
  E_DLL0 int E_DLL1 ROIBW16_Save_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 ROIBW16_SetSize_INT32_INT32(void* impl, int width, int height);
  E_DLL0 int E_DLL1 ROIBW16_SetSize_ROIBW1(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW16_SetSize_ROIBW8(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW16_SetSize_ROIBW16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW16_SetSize_ROIBW32(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW16_SetSize_ROIC24(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW16_SetSize_ROIC24A(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW16_SetSize_ROIC15(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW16_SetSize_ROIC16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW16_SetPlacement_INT32_INT32_INT32_INT32(void* impl, int originX, int originY, int width, int height);
  E_DLL0 int E_DLL1 ROIBW16_getOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_setOrgX_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW16_getOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_setOrgY_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW16_getWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_setWidth_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW16_getHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_setHeight_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW16_getTotalOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_getTotalOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_getTotalWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_getTotalHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_Attach_ROIBW16(void* impl, void** parent);
  E_DLL0 int E_DLL1 ROIBW16_Detach(void* impl);
  E_DLL0 int E_DLL1 ROIBW16_getParent_ROIBW16(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW16_getTopParent_ROIBW16(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW16_getFirstSubROI_ROIBW16(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW16_getNextSiblingROI_ROIBW16(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW16_getNextROI_ROIBW16_ROIBW16(void* impl, void** startROI, void** retVal);
  E_DLL0 int E_DLL1 ROIBW16_GetPixel_INT32_INT32_BW16(void* impl, int x, int y, void** retVal);
  E_DLL0 int E_DLL1 ROIBW16_SetPixel_BW16_INT32_INT32(void* impl, void* value, int x, int y);
  E_DLL0 int E_DLL1 ROIBW16_getColPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_getRowPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_getVoid_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_getAuthor_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW16_setAuthor_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW16_getComment_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW16_setComment_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW16_getDate_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW16_setDate_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW16_getTitle_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW16_setTitle_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW16_getColorSystem_ColorSystem(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_setColorSystem_ColorSystem(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW16_getType_ImageType(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_IsAnROI_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_SameSize_ROIBW16_INT16(void* impl, void* roi, short* retVal);
  E_DLL0 int E_DLL1 ROIBW16_getBitsPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_getPlanesPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW16_GetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* pixelWidth, float* pixelHeight, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIBW16_SetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float pixelWidth, float pixelHeight, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIBW16_SetPixelDimensions_FLOAT32_FLOAT32(void* impl, float pixelWidth, float pixelHeight);
  E_DLL0 int E_DLL1 ROIBW16_GetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* horizontalPixelPerUnits, float* verticalPixelPerUnits, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIBW16_SetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIBW16_SetResolution_FLOAT32_FLOAT32(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits);
  E_DLL0 int E_DLL1 ROIBW16_SetColorSystem(void* impl);
  E_DLL0 int E_DLL1 ROIBW16_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ROIBW16_Ctor_ROIBW16_INT32_INT32_INT32_INT32(void** impl, void** parent, int originX, int originY, int width, int height, int handle);
  E_DLL0 int E_DLL1 ROIBW16_Ctor_ROIBW16(void** impl, void* roiBW16, int handle);
  E_DLL0 int E_DLL1 ROIBW16_GetImagePointer_INT32_INT32_PixelPointer(void* impl, int x, int y, int* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ROIBW16_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ROIBW16_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ROIBW16_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ROIBW16_Dtor(void* impl);
  E_DLL0 int E_DLL1 ROIBW32_CopyTo_ROIBW32_BOOL(void* impl, void** destinationImage, int recursive);
  E_DLL0 int E_DLL1 ROIBW32_Draw_DrawAdapter_FLOAT32_FLOAT32(void* impl, void* context, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIBW32_Draw_DrawAdapter_FLOAT32(void* impl, void* context, float zoomX);
  E_DLL0 int E_DLL1 ROIBW32_Draw_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIBW32_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIBW32_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIBW32_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIBW32_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX);
  E_DLL0 int E_DLL1 ROIBW32_DrawFrame_DrawAdapter_FramePosition_BOOL(void* impl, void* context, int framePosition, int handles);
  E_DLL0 int E_DLL1 ROIBW32_DrawFrame_DrawAdapter_FramePosition(void* impl, void* context, int framePosition);
  E_DLL0 int E_DLL1 ROIBW32_DrawFrame_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIBW32_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, float panY, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_HitTest_INT32_INT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_HitTest_INT32_INT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_HitTest_INT32_INT32_DragHandle(void* impl, int x, int y, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIBW32_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIBW32_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIBW32_Drag_DragHandle_INT32_INT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX);
  E_DLL0 int E_DLL1 ROIBW32_Drag_DragHandle_INT32_INT32(void* impl, int handle, int x, int y);
  E_DLL0 int E_DLL1 ROIBW32_Load_ConstString_ImageFileType(void* impl, const char* pathName, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_Save_ConstString_ImageFileType(void* impl, const char* pathName, int format);
  E_DLL0 int E_DLL1 ROIBW32_Save_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 ROIBW32_SetSize_INT32_INT32(void* impl, int width, int height);
  E_DLL0 int E_DLL1 ROIBW32_SetSize_ROIBW1(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW32_SetSize_ROIBW8(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW32_SetSize_ROIBW16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW32_SetSize_ROIBW32(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW32_SetSize_ROIC24(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW32_SetSize_ROIC24A(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW32_SetSize_ROIC15(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW32_SetSize_ROIC16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIBW32_SetPlacement_INT32_INT32_INT32_INT32(void* impl, int originX, int originY, int width, int height);
  E_DLL0 int E_DLL1 ROIBW32_getOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_setOrgX_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW32_getOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_setOrgY_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW32_getWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_setWidth_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW32_getHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_setHeight_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW32_getTotalOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_getTotalOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_getTotalWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_getTotalHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_Attach_ROIBW32(void* impl, void** parent);
  E_DLL0 int E_DLL1 ROIBW32_Detach(void* impl);
  E_DLL0 int E_DLL1 ROIBW32_getParent_ROIBW32(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW32_getTopParent_ROIBW32(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW32_getFirstSubROI_ROIBW32(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW32_getNextSiblingROI_ROIBW32(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIBW32_getNextROI_ROIBW32_ROIBW32(void* impl, void** startROI, void** retVal);
  E_DLL0 int E_DLL1 ROIBW32_GetPixel_INT32_INT32_BW32(void* impl, int x, int y, void** retVal);
  E_DLL0 int E_DLL1 ROIBW32_SetPixel_BW32_INT32_INT32(void* impl, void* value, int x, int y);
  E_DLL0 int E_DLL1 ROIBW32_getColPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_getRowPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_getVoid_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_getAuthor_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW32_setAuthor_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW32_getComment_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW32_setComment_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW32_getDate_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW32_setDate_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW32_getTitle_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIBW32_setTitle_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIBW32_getColorSystem_ColorSystem(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_setColorSystem_ColorSystem(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIBW32_getType_ImageType(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_IsAnROI_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_SameSize_ROIBW32_INT16(void* impl, void* roi, short* retVal);
  E_DLL0 int E_DLL1 ROIBW32_getBitsPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_getPlanesPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIBW32_GetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* pixelWidth, float* pixelHeight, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIBW32_SetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float pixelWidth, float pixelHeight, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIBW32_SetPixelDimensions_FLOAT32_FLOAT32(void* impl, float pixelWidth, float pixelHeight);
  E_DLL0 int E_DLL1 ROIBW32_GetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* horizontalPixelPerUnits, float* verticalPixelPerUnits, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIBW32_SetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIBW32_SetResolution_FLOAT32_FLOAT32(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits);
  E_DLL0 int E_DLL1 ROIBW32_SetColorSystem(void* impl);
  E_DLL0 int E_DLL1 ROIBW32_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ROIBW32_Ctor_ROIBW32_INT32_INT32_INT32_INT32(void** impl, void** parent, int originX, int originY, int width, int height, int handle);
  E_DLL0 int E_DLL1 ROIBW32_Ctor_ROIBW32(void** impl, void* roiBW32, int handle);
  E_DLL0 int E_DLL1 ROIBW32_GetImagePointer_INT32_INT32_PixelPointer(void* impl, int x, int y, int* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ROIBW32_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ROIBW32_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ROIBW32_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ROIBW32_Dtor(void* impl);
  E_DLL0 int E_DLL1 ROIC24_CopyTo_ROIC24_BOOL(void* impl, void** destinationImage, int recursive);
  E_DLL0 int E_DLL1 ROIC24_Draw_DrawAdapter_FLOAT32_FLOAT32(void* impl, void* context, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIC24_Draw_DrawAdapter_FLOAT32(void* impl, void* context, float zoomX);
  E_DLL0 int E_DLL1 ROIC24_Draw_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIC24_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIC24_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIC24_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIC24_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX);
  E_DLL0 int E_DLL1 ROIC24_DrawFrame_DrawAdapter_FramePosition_BOOL(void* impl, void* context, int framePosition, int handles);
  E_DLL0 int E_DLL1 ROIC24_DrawFrame_DrawAdapter_FramePosition(void* impl, void* context, int framePosition);
  E_DLL0 int E_DLL1 ROIC24_DrawFrame_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIC24_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, float panY, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_HitTest_INT32_INT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_HitTest_INT32_INT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_HitTest_INT32_INT32_DragHandle(void* impl, int x, int y, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIC24_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIC24_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIC24_Drag_DragHandle_INT32_INT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX);
  E_DLL0 int E_DLL1 ROIC24_Drag_DragHandle_INT32_INT32(void* impl, int handle, int x, int y);
  E_DLL0 int E_DLL1 ROIC24_Load_ConstString_ImageFileType(void* impl, const char* pathName, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_Save_ConstString_ImageFileType(void* impl, const char* pathName, int format);
  E_DLL0 int E_DLL1 ROIC24_Save_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 ROIC24_SetSize_INT32_INT32(void* impl, int width, int height);
  E_DLL0 int E_DLL1 ROIC24_SetSize_ROIBW1(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24_SetSize_ROIBW8(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24_SetSize_ROIBW16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24_SetSize_ROIBW32(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24_SetSize_ROIC24(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24_SetSize_ROIC24A(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24_SetSize_ROIC15(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24_SetSize_ROIC16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24_SetPlacement_INT32_INT32_INT32_INT32(void* impl, int originX, int originY, int width, int height);
  E_DLL0 int E_DLL1 ROIC24_getOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_setOrgX_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC24_getOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_setOrgY_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC24_getWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_setWidth_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC24_getHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_setHeight_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC24_getTotalOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_getTotalOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_getTotalWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_getTotalHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_Attach_ROIC24(void* impl, void** parent);
  E_DLL0 int E_DLL1 ROIC24_Detach(void* impl);
  E_DLL0 int E_DLL1 ROIC24_getParent_ROIC24(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC24_getTopParent_ROIC24(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC24_getFirstSubROI_ROIC24(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC24_getNextSiblingROI_ROIC24(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC24_getNextROI_ROIC24_ROIC24(void* impl, void** startROI, void** retVal);
  E_DLL0 int E_DLL1 ROIC24_GetPixel_INT32_INT32_C24(void* impl, int x, int y, void** retVal);
  E_DLL0 int E_DLL1 ROIC24_SetPixel_C24_INT32_INT32(void* impl, void* value, int x, int y);
  E_DLL0 int E_DLL1 ROIC24_getColPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_getRowPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_getVoid_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_getAuthor_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC24_setAuthor_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC24_getComment_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC24_setComment_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC24_getDate_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC24_setDate_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC24_getTitle_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC24_setTitle_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC24_getColorSystem_ColorSystem(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_setColorSystem_ColorSystem(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC24_getType_ImageType(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_IsAnROI_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_SameSize_ROIC24_INT16(void* impl, void* roi, short* retVal);
  E_DLL0 int E_DLL1 ROIC24_getBitsPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_getPlanesPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24_GetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* pixelWidth, float* pixelHeight, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIC24_SetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float pixelWidth, float pixelHeight, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIC24_SetPixelDimensions_FLOAT32_FLOAT32(void* impl, float pixelWidth, float pixelHeight);
  E_DLL0 int E_DLL1 ROIC24_GetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* horizontalPixelPerUnits, float* verticalPixelPerUnits, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIC24_SetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIC24_SetResolution_FLOAT32_FLOAT32(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits);
  E_DLL0 int E_DLL1 ROIC24_SetColorSystem(void* impl);
  E_DLL0 int E_DLL1 ROIC24_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ROIC24_Ctor_ROIC24_INT32_INT32_INT32_INT32(void** impl, void** parent, int originX, int originY, int width, int height, int handle);
  E_DLL0 int E_DLL1 ROIC24_Ctor_ROIC24(void** impl, void* roiC24, int handle);
  E_DLL0 int E_DLL1 ROIC24_GetImagePointer_INT32_INT32_PixelPointer(void* impl, int x, int y, int* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ROIC24_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ROIC24_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ROIC24_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ROIC24_Dtor(void* impl);
  E_DLL0 int E_DLL1 ROIC24A_CopyTo_ROIC24A_BOOL(void* impl, void** destinationImage, int recursive);
  E_DLL0 int E_DLL1 ROIC24A_Draw_DrawAdapter_FLOAT32_FLOAT32(void* impl, void* context, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIC24A_Draw_DrawAdapter_FLOAT32(void* impl, void* context, float zoomX);
  E_DLL0 int E_DLL1 ROIC24A_Draw_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIC24A_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIC24A_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIC24A_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIC24A_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX);
  E_DLL0 int E_DLL1 ROIC24A_DrawFrame_DrawAdapter_FramePosition_BOOL(void* impl, void* context, int framePosition, int handles);
  E_DLL0 int E_DLL1 ROIC24A_DrawFrame_DrawAdapter_FramePosition(void* impl, void* context, int framePosition);
  E_DLL0 int E_DLL1 ROIC24A_DrawFrame_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIC24A_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, float panY, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_HitTest_INT32_INT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_HitTest_INT32_INT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_HitTest_INT32_INT32_DragHandle(void* impl, int x, int y, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIC24A_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIC24A_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIC24A_Drag_DragHandle_INT32_INT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX);
  E_DLL0 int E_DLL1 ROIC24A_Drag_DragHandle_INT32_INT32(void* impl, int handle, int x, int y);
  E_DLL0 int E_DLL1 ROIC24A_Load_ConstString_ImageFileType(void* impl, const char* pathName, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_Save_ConstString_ImageFileType(void* impl, const char* pathName, int format);
  E_DLL0 int E_DLL1 ROIC24A_Save_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 ROIC24A_SetSize_INT32_INT32(void* impl, int width, int height);
  E_DLL0 int E_DLL1 ROIC24A_SetSize_ROIBW1(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24A_SetSize_ROIBW8(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24A_SetSize_ROIBW16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24A_SetSize_ROIBW32(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24A_SetSize_ROIC24(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24A_SetSize_ROIC24A(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24A_SetSize_ROIC15(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24A_SetSize_ROIC16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC24A_SetPlacement_INT32_INT32_INT32_INT32(void* impl, int originX, int originY, int width, int height);
  E_DLL0 int E_DLL1 ROIC24A_getOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_setOrgX_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC24A_getOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_setOrgY_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC24A_getWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_setWidth_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC24A_getHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_setHeight_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC24A_getTotalOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_getTotalOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_getTotalWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_getTotalHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_Attach_ROIC24A(void* impl, void** parent);
  E_DLL0 int E_DLL1 ROIC24A_Detach(void* impl);
  E_DLL0 int E_DLL1 ROIC24A_getParent_ROIC24A(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC24A_getTopParent_ROIC24A(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC24A_getFirstSubROI_ROIC24A(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC24A_getNextSiblingROI_ROIC24A(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC24A_getNextROI_ROIC24A_ROIC24A(void* impl, void** startROI, void** retVal);
  E_DLL0 int E_DLL1 ROIC24A_GetPixel_INT32_INT32_C24A(void* impl, int x, int y, void** retVal);
  E_DLL0 int E_DLL1 ROIC24A_SetPixel_C24A_INT32_INT32(void* impl, void* value, int x, int y);
  E_DLL0 int E_DLL1 ROIC24A_getColPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_getRowPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_getVoid_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_getAuthor_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC24A_setAuthor_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC24A_getComment_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC24A_setComment_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC24A_getDate_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC24A_setDate_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC24A_getTitle_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC24A_setTitle_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC24A_getColorSystem_ColorSystem(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_setColorSystem_ColorSystem(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC24A_getType_ImageType(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_IsAnROI_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_SameSize_ROIC24A_INT16(void* impl, void* roi, short* retVal);
  E_DLL0 int E_DLL1 ROIC24A_getBitsPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_getPlanesPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC24A_GetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* pixelWidth, float* pixelHeight, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIC24A_SetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float pixelWidth, float pixelHeight, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIC24A_SetPixelDimensions_FLOAT32_FLOAT32(void* impl, float pixelWidth, float pixelHeight);
  E_DLL0 int E_DLL1 ROIC24A_GetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* horizontalPixelPerUnits, float* verticalPixelPerUnits, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIC24A_SetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIC24A_SetResolution_FLOAT32_FLOAT32(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits);
  E_DLL0 int E_DLL1 ROIC24A_SetColorSystem(void* impl);
  E_DLL0 int E_DLL1 ROIC24A_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ROIC24A_Ctor_ROIC24A_INT32_INT32_INT32_INT32(void** impl, void** parent, int originX, int originY, int width, int height, int handle);
  E_DLL0 int E_DLL1 ROIC24A_Ctor_ROIC24A(void** impl, void* roiC24A, int handle);
  E_DLL0 int E_DLL1 ROIC24A_GetImagePointer_INT32_INT32_PixelPointer(void* impl, int x, int y, int* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ROIC24A_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ROIC24A_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ROIC24A_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ROIC24A_Dtor(void* impl);
  E_DLL0 int E_DLL1 ROIC15_CopyTo_ROIC15_BOOL(void* impl, void** destinationImage, int recursive);
  E_DLL0 int E_DLL1 ROIC15_Draw_DrawAdapter_FLOAT32_FLOAT32(void* impl, void* context, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIC15_Draw_DrawAdapter_FLOAT32(void* impl, void* context, float zoomX);
  E_DLL0 int E_DLL1 ROIC15_Draw_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIC15_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIC15_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIC15_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIC15_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX);
  E_DLL0 int E_DLL1 ROIC15_DrawFrame_DrawAdapter_FramePosition_BOOL(void* impl, void* context, int framePosition, int handles);
  E_DLL0 int E_DLL1 ROIC15_DrawFrame_DrawAdapter_FramePosition(void* impl, void* context, int framePosition);
  E_DLL0 int E_DLL1 ROIC15_DrawFrame_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIC15_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, float panY, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_HitTest_INT32_INT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_HitTest_INT32_INT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_HitTest_INT32_INT32_DragHandle(void* impl, int x, int y, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIC15_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIC15_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIC15_Drag_DragHandle_INT32_INT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX);
  E_DLL0 int E_DLL1 ROIC15_Drag_DragHandle_INT32_INT32(void* impl, int handle, int x, int y);
  E_DLL0 int E_DLL1 ROIC15_Load_ConstString_ImageFileType(void* impl, const char* pathName, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_Save_ConstString_ImageFileType(void* impl, const char* pathName, int format);
  E_DLL0 int E_DLL1 ROIC15_Save_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 ROIC15_SetSize_INT32_INT32(void* impl, int width, int height);
  E_DLL0 int E_DLL1 ROIC15_SetSize_ROIBW1(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC15_SetSize_ROIBW8(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC15_SetSize_ROIBW16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC15_SetSize_ROIBW32(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC15_SetSize_ROIC24(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC15_SetSize_ROIC24A(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC15_SetSize_ROIC15(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC15_SetSize_ROIC16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC15_SetPlacement_INT32_INT32_INT32_INT32(void* impl, int originX, int originY, int width, int height);
  E_DLL0 int E_DLL1 ROIC15_getOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_setOrgX_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC15_getOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_setOrgY_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC15_getWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_setWidth_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC15_getHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_setHeight_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC15_getTotalOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_getTotalOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_getTotalWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_getTotalHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_Attach_ROIC15(void* impl, void** parent);
  E_DLL0 int E_DLL1 ROIC15_Detach(void* impl);
  E_DLL0 int E_DLL1 ROIC15_getParent_ROIC15(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC15_getTopParent_ROIC15(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC15_getFirstSubROI_ROIC15(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC15_getNextSiblingROI_ROIC15(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC15_getNextROI_ROIC15_ROIC15(void* impl, void** startROI, void** retVal);
  E_DLL0 int E_DLL1 ROIC15_GetPixel_INT32_INT32_C15(void* impl, int x, int y, void** retVal);
  E_DLL0 int E_DLL1 ROIC15_SetPixel_C15_INT32_INT32(void* impl, void* value, int x, int y);
  E_DLL0 int E_DLL1 ROIC15_getColPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_getRowPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_getVoid_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_getAuthor_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC15_setAuthor_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC15_getComment_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC15_setComment_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC15_getDate_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC15_setDate_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC15_getTitle_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC15_setTitle_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC15_getColorSystem_ColorSystem(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_setColorSystem_ColorSystem(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC15_getType_ImageType(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_IsAnROI_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_SameSize_ROIC15_INT16(void* impl, void* roi, short* retVal);
  E_DLL0 int E_DLL1 ROIC15_getBitsPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_getPlanesPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC15_GetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* pixelWidth, float* pixelHeight, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIC15_SetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float pixelWidth, float pixelHeight, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIC15_SetPixelDimensions_FLOAT32_FLOAT32(void* impl, float pixelWidth, float pixelHeight);
  E_DLL0 int E_DLL1 ROIC15_GetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* horizontalPixelPerUnits, float* verticalPixelPerUnits, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIC15_SetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIC15_SetResolution_FLOAT32_FLOAT32(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits);
  E_DLL0 int E_DLL1 ROIC15_SetColorSystem(void* impl);
  E_DLL0 int E_DLL1 ROIC15_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ROIC15_Ctor_ROIC15_INT32_INT32_INT32_INT32(void** impl, void** parent, int originX, int originY, int width, int height, int handle);
  E_DLL0 int E_DLL1 ROIC15_Ctor_ROIC15(void** impl, void* roiC15, int handle);
  E_DLL0 int E_DLL1 ROIC15_GetImagePointer_INT32_INT32_PixelPointer(void* impl, int x, int y, int* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ROIC15_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ROIC15_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ROIC15_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ROIC15_Dtor(void* impl);
  E_DLL0 int E_DLL1 ROIC16_CopyTo_ROIC16_BOOL(void* impl, void** destinationImage, int recursive);
  E_DLL0 int E_DLL1 ROIC16_Draw_DrawAdapter_FLOAT32_FLOAT32(void* impl, void* context, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIC16_Draw_DrawAdapter_FLOAT32(void* impl, void* context, float zoomX);
  E_DLL0 int E_DLL1 ROIC16_Draw_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIC16_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIC16_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIC16_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIC16_DrawFrame_DrawAdapter_FramePosition_BOOL_FLOAT32(void* impl, void* context, int framePosition, int handles, float zoomX);
  E_DLL0 int E_DLL1 ROIC16_DrawFrame_DrawAdapter_FramePosition_BOOL(void* impl, void* context, int framePosition, int handles);
  E_DLL0 int E_DLL1 ROIC16_DrawFrame_DrawAdapter_FramePosition(void* impl, void* context, int framePosition);
  E_DLL0 int E_DLL1 ROIC16_DrawFrame_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 ROIC16_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, float panY, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_HitTest_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, float panX, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_HitTest_INT32_INT32_FLOAT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, float zoomY, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_HitTest_INT32_INT32_FLOAT32_DragHandle(void* impl, int x, int y, float zoomX, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_HitTest_INT32_INT32_DragHandle(void* impl, int x, int y, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX, float panY);
  E_DLL0 int E_DLL1 ROIC16_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY, float panX);
  E_DLL0 int E_DLL1 ROIC16_Drag_DragHandle_INT32_INT32_FLOAT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 ROIC16_Drag_DragHandle_INT32_INT32_FLOAT32(void* impl, int handle, int x, int y, float zoomX);
  E_DLL0 int E_DLL1 ROIC16_Drag_DragHandle_INT32_INT32(void* impl, int handle, int x, int y);
  E_DLL0 int E_DLL1 ROIC16_Load_ConstString_ImageFileType(void* impl, const char* pathName, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_Save_ConstString_ImageFileType(void* impl, const char* pathName, int format);
  E_DLL0 int E_DLL1 ROIC16_Save_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 ROIC16_SetSize_INT32_INT32(void* impl, int width, int height);
  E_DLL0 int E_DLL1 ROIC16_SetSize_ROIBW1(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC16_SetSize_ROIBW8(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC16_SetSize_ROIBW16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC16_SetSize_ROIBW32(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC16_SetSize_ROIC24(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC16_SetSize_ROIC24A(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC16_SetSize_ROIC15(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC16_SetSize_ROIC16(void* impl, void* roi);
  E_DLL0 int E_DLL1 ROIC16_SetPlacement_INT32_INT32_INT32_INT32(void* impl, int originX, int originY, int width, int height);
  E_DLL0 int E_DLL1 ROIC16_getOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_setOrgX_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC16_getOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_setOrgY_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC16_getWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_setWidth_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC16_getHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_setHeight_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC16_getTotalOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_getTotalOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_getTotalWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_getTotalHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_Attach_ROIC16(void* impl, void** parent);
  E_DLL0 int E_DLL1 ROIC16_Detach(void* impl);
  E_DLL0 int E_DLL1 ROIC16_getParent_ROIC16(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC16_getTopParent_ROIC16(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC16_getFirstSubROI_ROIC16(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC16_getNextSiblingROI_ROIC16(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ROIC16_getNextROI_ROIC16_ROIC16(void* impl, void** startROI, void** retVal);
  E_DLL0 int E_DLL1 ROIC16_GetPixel_INT32_INT32_C16(void* impl, int x, int y, void** retVal);
  E_DLL0 int E_DLL1 ROIC16_SetPixel_C16_INT32_INT32(void* impl, void* value, int x, int y);
  E_DLL0 int E_DLL1 ROIC16_getColPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_getRowPitch_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_getVoid_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_getAuthor_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC16_setAuthor_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC16_getComment_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC16_setComment_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC16_getDate_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC16_setDate_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC16_getTitle_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 ROIC16_setTitle_ConstString(void* impl, const char* retVal);
  E_DLL0 int E_DLL1 ROIC16_getColorSystem_ColorSystem(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_setColorSystem_ColorSystem(void* impl, int retVal);
  E_DLL0 int E_DLL1 ROIC16_getType_ImageType(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_IsAnROI_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_SameSize_ROIC16_INT16(void* impl, void* roi, short* retVal);
  E_DLL0 int E_DLL1 ROIC16_getBitsPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_getPlanesPerPixel_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 ROIC16_GetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* pixelWidth, float* pixelHeight, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIC16_SetPixelDimensions_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float pixelWidth, float pixelHeight, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIC16_SetPixelDimensions_FLOAT32_FLOAT32(void* impl, float pixelWidth, float pixelHeight);
  E_DLL0 int E_DLL1 ROIC16_GetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float* horizontalPixelPerUnits, float* verticalPixelPerUnits, void* unitOfLength);
  E_DLL0 int E_DLL1 ROIC16_SetResolution_FLOAT32_FLOAT32_MeasurementUnit(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits, void** pixelUnitOfLength);
  E_DLL0 int E_DLL1 ROIC16_SetResolution_FLOAT32_FLOAT32(void* impl, float horizontalPixelPerUnits, float verticalPixelPerUnits);
  E_DLL0 int E_DLL1 ROIC16_SetColorSystem(void* impl);
  E_DLL0 int E_DLL1 ROIC16_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ROIC16_Ctor_ROIC16_INT32_INT32_INT32_INT32(void** impl, void** parent, int originX, int originY, int width, int height, int handle);
  E_DLL0 int E_DLL1 ROIC16_Ctor_ROIC16(void** impl, void* roiC16, int handle);
  E_DLL0 int E_DLL1 ROIC16_GetImagePointer_INT32_INT32_PixelPointer(void* impl, int x, int y, int* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ROIC16_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ROIC16_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ROIC16_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ROIC16_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertImageBW1ToROIBW1(void** dst, void* src);
  E_DLL0 int E_DLL1 ImageBW1_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ImageBW1_Load_ConstString_ImageFileType(void* impl, const char* pathName, int* retVal);
  E_DLL0 int E_DLL1 ImageBW1_Ctor_INT32_INT32(void** impl, int width, int height, int handle);
  E_DLL0 int E_DLL1 ImageBW1_Ctor_ImageBW1(void** impl, void* imageBW1, int handle);
  E_DLL0 int E_DLL1 ImageBW1_SetImagePointer_INT32_INT32_PixelPointer_INT32(void* impl, int width, int height, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageBW1_SetImagePointer_INT32_INT32_PixelPointer(void* impl, int width, int height, int imagePointer);
  E_DLL0 int E_DLL1 ImageBW1_SetImagePointer_PixelPointer_INT32(void* impl, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageBW1_SetImagePointer_PixelPointer(void* impl, int imagePointer);
  E_DLL0 int E_DLL1 ImageBW1_CopyTo_ImageBW1_BOOL(void* impl, void** destinationImage, int recursive);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ImageBW1_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ImageBW1_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ImageBW1_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ImageBW1_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertImageBW8ToROIBW8(void** dst, void* src);
  E_DLL0 int E_DLL1 ImageBW8_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ImageBW8_Load_ConstString_ImageFileType(void* impl, const char* pathName, int* retVal);
  E_DLL0 int E_DLL1 ImageBW8_Ctor_INT32_INT32(void** impl, int width, int height, int handle);
  E_DLL0 int E_DLL1 ImageBW8_Ctor_ImageBW8(void** impl, void* imageBW8, int handle);
  E_DLL0 int E_DLL1 ImageBW8_SetImagePointer_INT32_INT32_PixelPointer_INT32(void* impl, int width, int height, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageBW8_SetImagePointer_INT32_INT32_PixelPointer(void* impl, int width, int height, int imagePointer);
  E_DLL0 int E_DLL1 ImageBW8_SetImagePointer_PixelPointer_INT32(void* impl, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageBW8_SetImagePointer_PixelPointer(void* impl, int imagePointer);
  E_DLL0 int E_DLL1 ImageBW8_CopyTo_ImageBW8_BOOL(void* impl, void** destinationImage, int recursive);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ImageBW8_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ImageBW8_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ImageBW8_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ImageBW8_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertImageBW16ToROIBW16(void** dst, void* src);
  E_DLL0 int E_DLL1 ImageBW16_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ImageBW16_Ctor_INT32_INT32(void** impl, int width, int height, int handle);
  E_DLL0 int E_DLL1 ImageBW16_Ctor_ImageBW16(void** impl, void* imageBW16, int handle);
  E_DLL0 int E_DLL1 ImageBW16_SetImagePointer_INT32_INT32_PixelPointer_INT32(void* impl, int width, int height, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageBW16_SetImagePointer_INT32_INT32_PixelPointer(void* impl, int width, int height, int imagePointer);
  E_DLL0 int E_DLL1 ImageBW16_SetImagePointer_PixelPointer_INT32(void* impl, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageBW16_SetImagePointer_PixelPointer(void* impl, int imagePointer);
  E_DLL0 int E_DLL1 ImageBW16_CopyTo_ImageBW16_BOOL(void* impl, void** destinationImage, int recursive);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ImageBW16_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ImageBW16_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ImageBW16_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ImageBW16_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertImageBW32ToROIBW32(void** dst, void* src);
  E_DLL0 int E_DLL1 ImageBW32_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ImageBW32_Ctor_INT32_INT32(void** impl, int width, int height, int handle);
  E_DLL0 int E_DLL1 ImageBW32_Ctor_ImageBW32(void** impl, void* imageBW32, int handle);
  E_DLL0 int E_DLL1 ImageBW32_SetImagePointer_INT32_INT32_PixelPointer_INT32(void* impl, int width, int height, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageBW32_SetImagePointer_INT32_INT32_PixelPointer(void* impl, int width, int height, int imagePointer);
  E_DLL0 int E_DLL1 ImageBW32_SetImagePointer_PixelPointer_INT32(void* impl, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageBW32_SetImagePointer_PixelPointer(void* impl, int imagePointer);
  E_DLL0 int E_DLL1 ImageBW32_CopyTo_ImageBW32_BOOL(void* impl, void** destinationImage, int recursive);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ImageBW32_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ImageBW32_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ImageBW32_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ImageBW32_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertImageC24ToROIC24(void** dst, void* src);
  E_DLL0 int E_DLL1 ImageC24_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ImageC24_Ctor_INT32_INT32(void** impl, int width, int height, int handle);
  E_DLL0 int E_DLL1 ImageC24_Ctor_ImageC24(void** impl, void* imageC24, int handle);
  E_DLL0 int E_DLL1 ImageC24_SetImagePointer_INT32_INT32_PixelPointer_INT32(void* impl, int width, int height, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageC24_SetImagePointer_INT32_INT32_PixelPointer(void* impl, int width, int height, int imagePointer);
  E_DLL0 int E_DLL1 ImageC24_SetImagePointer_PixelPointer_INT32(void* impl, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageC24_SetImagePointer_PixelPointer(void* impl, int imagePointer);
  E_DLL0 int E_DLL1 ImageC24_CopyTo_ImageC24_BOOL(void* impl, void** destinationImage, int recursive);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ImageC24_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ImageC24_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ImageC24_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ImageC24_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertImageC24AToROIC24A(void** dst, void* src);
  E_DLL0 int E_DLL1 ImageC24A_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ImageC24A_Ctor_INT32_INT32(void** impl, int width, int height, int handle);
  E_DLL0 int E_DLL1 ImageC24A_Ctor_ImageC24A(void** impl, void* imageC24A, int handle);
  E_DLL0 int E_DLL1 ImageC24A_SetImagePointer_INT32_INT32_PixelPointer_INT32(void* impl, int width, int height, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageC24A_SetImagePointer_INT32_INT32_PixelPointer(void* impl, int width, int height, int imagePointer);
  E_DLL0 int E_DLL1 ImageC24A_SetImagePointer_PixelPointer_INT32(void* impl, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageC24A_SetImagePointer_PixelPointer(void* impl, int imagePointer);
  E_DLL0 int E_DLL1 ImageC24A_CopyTo_ImageC24A_BOOL(void* impl, void** destinationImage, int recursive);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ImageC24A_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ImageC24A_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ImageC24A_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ImageC24A_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertImageC15ToROIC15(void** dst, void* src);
  E_DLL0 int E_DLL1 ImageC15_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ImageC15_Ctor_INT32_INT32(void** impl, int width, int height, int handle);
  E_DLL0 int E_DLL1 ImageC15_Ctor_ImageC15(void** impl, void* imageC15, int handle);
  E_DLL0 int E_DLL1 ImageC15_SetImagePointer_INT32_INT32_PixelPointer_INT32(void* impl, int width, int height, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageC15_SetImagePointer_INT32_INT32_PixelPointer(void* impl, int width, int height, int imagePointer);
  E_DLL0 int E_DLL1 ImageC15_SetImagePointer_PixelPointer_INT32(void* impl, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageC15_SetImagePointer_PixelPointer(void* impl, int imagePointer);
  E_DLL0 int E_DLL1 ImageC15_CopyTo_ImageC15_BOOL(void* impl, void** destinationImage, int recursive);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ImageC15_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ImageC15_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ImageC15_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ImageC15_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertImageC16ToROIC16(void** dst, void* src);
  E_DLL0 int E_DLL1 ImageC16_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 ImageC16_Ctor_INT32_INT32(void** impl, int width, int height, int handle);
  E_DLL0 int E_DLL1 ImageC16_Ctor_ImageC16(void** impl, void* imageC16, int handle);
  E_DLL0 int E_DLL1 ImageC16_SetImagePointer_INT32_INT32_PixelPointer_INT32(void* impl, int width, int height, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageC16_SetImagePointer_INT32_INT32_PixelPointer(void* impl, int width, int height, int imagePointer);
  E_DLL0 int E_DLL1 ImageC16_SetImagePointer_PixelPointer_INT32(void* impl, int imagePointer, int bitsPerRow);
  E_DLL0 int E_DLL1 ImageC16_SetImagePointer_PixelPointer(void* impl, int imagePointer);
  E_DLL0 int E_DLL1 ImageC16_CopyTo_ImageC16_BOOL(void* impl, void** destinationImage, int recursive);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ImageC16_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ImageC16_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ImageC16_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ImageC16_Dtor(void* impl);
  E_DLL0 int E_DLL1 MeasurementUnit_Ctor_FLOAT32_ConstString(void** impl, float magnitude, const char* name, int handle);
  E_DLL0 int E_DLL1 MeasurementUnit_getMagnitude_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 MeasurementUnit_getName_ConstString(void* impl, const char** retVal);
  E_DLL0 int E_DLL1 MeasurementUnit_ConversionFactorTo_MeasurementUnit_FLOAT32(void* impl, void** unit, float* retVal);
  E_DLL0 void* E_DLL1 MeasurementUnit_um();
  E_DLL0 void* E_DLL1 MeasurementUnit_mm();
  E_DLL0 void* E_DLL1 MeasurementUnit_cm();
  E_DLL0 void* E_DLL1 MeasurementUnit_dm();
  E_DLL0 void* E_DLL1 MeasurementUnit_m();
  E_DLL0 void* E_DLL1 MeasurementUnit_Dm();
  E_DLL0 void* E_DLL1 MeasurementUnit_Hm();
  E_DLL0 void* E_DLL1 MeasurementUnit_Km();
  E_DLL0 void* E_DLL1 MeasurementUnit_mil();
  E_DLL0 void* E_DLL1 MeasurementUnit_inch();
  E_DLL0 void* E_DLL1 MeasurementUnit_foot();
  E_DLL0 void* E_DLL1 MeasurementUnit_yard();
  E_DLL0 void* E_DLL1 MeasurementUnit_mile();
  E_DLL0 void* E_DLL1 MeasurementUnit_NoUnit();
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  MeasurementUnit_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  MeasurementUnit_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 MeasurementUnit_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 MeasurementUnit_Dtor(void* impl);
  E_DLL0 int E_DLL1 BW8Vector_Ctor_UINT32(void** impl, unsigned int maximumNumberOfElements, int handle);
  E_DLL0 int E_DLL1 BW8Vector_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 BW8Vector_WeightedMoment_UINT32_UINT32_FLOAT32(void* impl, unsigned int from, unsigned int to, float* retVal);
  E_DLL0 int E_DLL1 BW8Vector_AddElement_BW8(void* impl, void* element);
  E_DLL0 int E_DLL1 BW8Vector_Empty(void* impl);
  E_DLL0 int E_DLL1 BW8Vector_getNumElements_UINT32(void* impl, unsigned int* retVal);
  E_DLL0 int E_DLL1 BW8Vector_setNumElements_UINT32(void* impl, unsigned int retVal);
  E_DLL0 int E_DLL1 BW8Vector_Draw_DrawAdapter_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, float width, float height, float originX, float originY);
  E_DLL0 int E_DLL1 BW8Vector_Draw_DrawAdapter_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, float width, float height, float originX);
  E_DLL0 int E_DLL1 BW8Vector_Draw_DrawAdapter_FLOAT32_FLOAT32(void* impl, void* context, float width, float height);
  E_DLL0 int E_DLL1 BW8Vector_getElement_INT32_BW8(void* impl, int index, void** retVal);
  E_DLL0 int E_DLL1 BW8Vector_setElement_INT32_BW8(void* impl, int index, void* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  BW8Vector_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  BW8Vector_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 BW8Vector_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 BW8Vector_Dtor(void* impl);
  E_DLL0 int E_DLL1 BW16Vector_Ctor_UINT32(void** impl, unsigned int maximumNumberOfElements, int handle);
  E_DLL0 int E_DLL1 BW16Vector_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 BW16Vector_WeightedMoment_UINT32_UINT32_FLOAT32(void* impl, unsigned int from, unsigned int to, float* retVal);
  E_DLL0 int E_DLL1 BW16Vector_AddElement_BW16(void* impl, void* element);
  E_DLL0 int E_DLL1 BW16Vector_Empty(void* impl);
  E_DLL0 int E_DLL1 BW16Vector_getNumElements_UINT32(void* impl, unsigned int* retVal);
  E_DLL0 int E_DLL1 BW16Vector_setNumElements_UINT32(void* impl, unsigned int retVal);
  E_DLL0 int E_DLL1 BW16Vector_Draw_DrawAdapter_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, float width, float height, float originX, float originY);
  E_DLL0 int E_DLL1 BW16Vector_Draw_DrawAdapter_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, float width, float height, float originX);
  E_DLL0 int E_DLL1 BW16Vector_Draw_DrawAdapter_FLOAT32_FLOAT32(void* impl, void* context, float width, float height);
  E_DLL0 int E_DLL1 BW16Vector_getElement_INT32_BW16(void* impl, int index, void** retVal);
  E_DLL0 int E_DLL1 BW16Vector_setElement_INT32_BW16(void* impl, int index, void* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  BW16Vector_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  BW16Vector_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 BW16Vector_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 BW16Vector_Dtor(void* impl);
  E_DLL0 int E_DLL1 BW32Vector_Ctor_UINT32(void** impl, unsigned int maximumNumberOfElements, int handle);
  E_DLL0 int E_DLL1 BW32Vector_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 BW32Vector_WeightedMoment_UINT32_UINT32_FLOAT32(void* impl, unsigned int from, unsigned int to, float* retVal);
  E_DLL0 int E_DLL1 BW32Vector_AddElement_BW32(void* impl, void* element);
  E_DLL0 int E_DLL1 BW32Vector_Empty(void* impl);
  E_DLL0 int E_DLL1 BW32Vector_getNumElements_UINT32(void* impl, unsigned int* retVal);
  E_DLL0 int E_DLL1 BW32Vector_setNumElements_UINT32(void* impl, unsigned int retVal);
  E_DLL0 int E_DLL1 BW32Vector_Draw_DrawAdapter_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, float width, float height, float originX, float originY);
  E_DLL0 int E_DLL1 BW32Vector_Draw_DrawAdapter_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, float width, float height, float originX);
  E_DLL0 int E_DLL1 BW32Vector_Draw_DrawAdapter_FLOAT32_FLOAT32(void* impl, void* context, float width, float height);
  E_DLL0 int E_DLL1 BW32Vector_getElement_INT32_BW32(void* impl, int index, void** retVal);
  E_DLL0 int E_DLL1 BW32Vector_setElement_INT32_BW32(void* impl, int index, void* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  BW32Vector_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  BW32Vector_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 BW32Vector_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 BW32Vector_Dtor(void* impl);
  E_DLL0 int E_DLL1 C24Vector_Ctor_UINT32(void** impl, unsigned int maximumNumberOfElements, int handle);
  E_DLL0 int E_DLL1 C24Vector_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 C24Vector_AddElement_C24(void* impl, void* element);
  E_DLL0 int E_DLL1 C24Vector_Empty(void* impl);
  E_DLL0 int E_DLL1 C24Vector_getNumElements_UINT32(void* impl, unsigned int* retVal);
  E_DLL0 int E_DLL1 C24Vector_setNumElements_UINT32(void* impl, unsigned int retVal);
  E_DLL0 int E_DLL1 C24Vector_Draw_DrawAdapter_FLOAT32_FLOAT32_FLOAT32_FLOAT32_RgbColor_RgbColor_RgbColor(void* impl, void* context, float width, float height, float originX, float originY, void* color0, void* color1, void* color2);
  E_DLL0 int E_DLL1 C24Vector_Draw_DrawAdapter_FLOAT32_FLOAT32_FLOAT32_FLOAT32_RgbColor_RgbColor(void* impl, void* context, float width, float height, float originX, float originY, void* color0, void* color1);
  E_DLL0 int E_DLL1 C24Vector_Draw_DrawAdapter_FLOAT32_FLOAT32_FLOAT32_FLOAT32_RgbColor(void* impl, void* context, float width, float height, float originX, float originY, void* color0);
  E_DLL0 int E_DLL1 C24Vector_Draw_DrawAdapter_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, float width, float height, float originX, float originY);
  E_DLL0 int E_DLL1 C24Vector_Draw_DrawAdapter_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, float width, float height, float originX);
  E_DLL0 int E_DLL1 C24Vector_Draw_DrawAdapter_FLOAT32_FLOAT32(void* impl, void* context, float width, float height);
  E_DLL0 int E_DLL1 C24Vector_getElement_INT32_C24(void* impl, int index, void** retVal);
  E_DLL0 int E_DLL1 C24Vector_setElement_INT32_C24(void* impl, int index, void* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  C24Vector_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  C24Vector_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 C24Vector_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 C24Vector_Dtor(void* impl);
  E_DLL0 int E_DLL1 Shape_Attach_Shape(void* impl, void** mother);
  E_DLL0 int E_DLL1 Shape_Detach(void* impl);
  E_DLL0 int E_DLL1 Shape_DetachDaughters(void* impl);
  E_DLL0 int E_DLL1 Shape_getNumDaughters_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 Shape_getMother_Shape(void* impl, void** retVal);
  E_DLL0 int E_DLL1 Shape_GetDaughter_INT32_Shape(void* impl, int index, void** retVal);
  E_DLL0 int E_DLL1 Shape_GetShapeNamed_ConstString_Shape(void* impl, const char* name, void** retVal);
  E_DLL0 int E_DLL1 Shape_InvalidateWorld(void* impl);
  E_DLL0 int E_DLL1 Shape_SetSelected_BOOL_BOOL(void* impl, int selected, int daughters);
  E_DLL0 int E_DLL1 Shape_SetSelected_BOOL(void* impl, int selected);
  E_DLL0 int E_DLL1 Shape_getType_ShapeType(void* impl, int* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  Shape_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  Shape_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 Shape_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Shape_Dtor(void* impl);
  E_DLL0 int E_DLL1 ColorVector_Ctor_UINT32(void** impl, unsigned int maximumNumberOfElements, int handle);
  E_DLL0 int E_DLL1 ColorVector_AddElement_GenericColor(void* impl, void* element);
  E_DLL0 int E_DLL1 ColorVector_Empty(void* impl);
  E_DLL0 int E_DLL1 ColorVector_getNumElements_UINT32(void* impl, unsigned int* retVal);
  E_DLL0 int E_DLL1 ColorVector_setNumElements_UINT32(void* impl, unsigned int retVal);
  E_DLL0 int E_DLL1 ColorVector_getDataPtr_GenericColor(void* impl, void** retVal);
  E_DLL0 int E_DLL1 ColorVector_getElement_INT32_GenericColor(void* impl, int index, void** retVal);
  E_DLL0 int E_DLL1 ColorVector_setElement_INT32_GenericColor(void* impl, int index, void* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  ColorVector_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  ColorVector_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 ColorVector_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 ColorVector_Dtor(void* impl);
  E_DLL0 int E_DLL1 JpegHandler_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 JpegHandler_DecompressToImage_ImageC24_ScalingMode(void* impl, void** image, int scalingMode);
  E_DLL0 int E_DLL1 JpegHandler_DecompressToImage_ImageC24(void* impl, void** image);
  E_DLL0 int E_DLL1 JpegHandler_Load_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 JpegHandler_Save_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 JpegHandler_LoadFJfif_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 JpegHandler_LoadSJfif_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 JpegHandler_SaveFJfif_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 JpegHandler_SaveSJfif_ConstString(void* impl, const char* pathName);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  JpegHandler_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  JpegHandler_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 JpegHandler_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 JpegHandler_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertWorldShapeToShape(void** dst, void* src);
  E_DLL0 int E_DLL1 WorldShape_Calibrate_UINT32(void* impl, unsigned int mode);
  E_DLL0 int E_DLL1 WorldShape_getCalibrationSucceeded_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 WorldShape_AutoCalibrate_BOOL_UINT32(void* impl, int testEmpiricalModes, unsigned int* retVal);
  E_DLL0 int E_DLL1 WorldShape_AutoCalibrate_UINT32(void* impl, unsigned int* retVal);
  E_DLL0 int E_DLL1 WorldShape_getGridPointsMeanVariation_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_getGridPointsMaxVariation_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_getGridPointsMeanVariationThreshold_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_setGridPointsMeanVariationThreshold_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 WorldShape_getGridPointsMaxVariationThreshold_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_setGridPointsMaxVariationThreshold_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 WorldShape_AddPoint_Point(void* impl, void* sensorPoint);
  E_DLL0 int E_DLL1 WorldShape_RebuildGrid_FLOAT32_FLOAT32_UINT32_Point_BOOL_UINT32(void* impl, float colPitch, float rowPitch, unsigned int centerIndex, void* worldCenter, int direct, unsigned int* retVal);
  E_DLL0 int E_DLL1 WorldShape_RebuildGrid_FLOAT32_FLOAT32_UINT32_Point_UINT32(void* impl, float colPitch, float rowPitch, unsigned int centerIndex, void* worldCenter, unsigned int* retVal);
  E_DLL0 int E_DLL1 WorldShape_RebuildGrid_FLOAT32_FLOAT32_UINT32_UINT32(void* impl, float colPitch, float rowPitch, unsigned int centerIndex, unsigned int* retVal);
  E_DLL0 int E_DLL1 WorldShape_RebuildGrid_FLOAT32_FLOAT32_UINT32(void* impl, float colPitch, float rowPitch, unsigned int* retVal);
  E_DLL0 int E_DLL1 WorldShape_EmptyLandmarks(void* impl);
  E_DLL0 int E_DLL1 WorldShape_AddLandmark_Point_Point(void* impl, void* sensorPoint, void* worldPoint);
  E_DLL0 int E_DLL1 WorldShape_AutoCalibrateLandmarks_BOOL_UINT32(void* impl, int testEmpiricalModes, unsigned int* retVal);
  E_DLL0 int E_DLL1 WorldShape_AutoCalibrateLandmarks_UINT32(void* impl, unsigned int* retVal);
  E_DLL0 int E_DLL1 WorldShape_SetSensor_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_UINT32(void* impl, int sensorWidth, int sensorHeight, float fieldWidth, float fieldHeight, float centerX, float centerY, float angle, float tiltXAngle, float tiltYAngle, float perspectiveStrength, float distortionStrength, float opticalCenterX, float opticalCenterY, unsigned int calibrationModes);
  E_DLL0 int E_DLL1 WorldShape_SetSensor_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int sensorWidth, int sensorHeight, float fieldWidth, float fieldHeight, float centerX, float centerY, float angle, float tiltXAngle, float tiltYAngle, float perspectiveStrength, float distortionStrength, float opticalCenterX, float opticalCenterY);
  E_DLL0 int E_DLL1 WorldShape_SetSensor_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int sensorWidth, int sensorHeight, float fieldWidth, float fieldHeight, float centerX, float centerY, float angle, float tiltXAngle, float tiltYAngle, float perspectiveStrength, float distortionStrength, float opticalCenterX);
  E_DLL0 int E_DLL1 WorldShape_SetSensor_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int sensorWidth, int sensorHeight, float fieldWidth, float fieldHeight, float centerX, float centerY, float angle, float tiltXAngle, float tiltYAngle, float perspectiveStrength, float distortionStrength);
  E_DLL0 int E_DLL1 WorldShape_SetSensor_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int sensorWidth, int sensorHeight, float fieldWidth, float fieldHeight, float centerX, float centerY, float angle, float tiltXAngle, float tiltYAngle, float perspectiveStrength);
  E_DLL0 int E_DLL1 WorldShape_SetSensor_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int sensorWidth, int sensorHeight, float fieldWidth, float fieldHeight, float centerX, float centerY, float angle, float tiltXAngle, float tiltYAngle);
  E_DLL0 int E_DLL1 WorldShape_SetSensor_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int sensorWidth, int sensorHeight, float fieldWidth, float fieldHeight, float centerX, float centerY, float angle, float tiltXAngle);
  E_DLL0 int E_DLL1 WorldShape_SetSensor_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int sensorWidth, int sensorHeight, float fieldWidth, float fieldHeight, float centerX, float centerY, float angle);
  E_DLL0 int E_DLL1 WorldShape_SetSensor_INT32_INT32_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int sensorWidth, int sensorHeight, float fieldWidth, float fieldHeight, float centerX, float centerY);
  E_DLL0 int E_DLL1 WorldShape_SetSensor_INT32_INT32_FLOAT32_FLOAT32_FLOAT32(void* impl, int sensorWidth, int sensorHeight, float fieldWidth, float fieldHeight, float centerX);
  E_DLL0 int E_DLL1 WorldShape_SetSensor_INT32_INT32_FLOAT32_FLOAT32(void* impl, int sensorWidth, int sensorHeight, float fieldWidth, float fieldHeight);
  E_DLL0 int E_DLL1 WorldShape_SetSensor_INT32_INT32_FLOAT32(void* impl, int sensorWidth, int sensorHeight, float fieldWidth);
  E_DLL0 int E_DLL1 WorldShape_SetSensor_INT32_INT32(void* impl, int sensorWidth, int sensorHeight);
  E_DLL0 int E_DLL1 WorldShape_SetSensorSize_INT32_INT32(void* impl, int width, int height);
  E_DLL0 int E_DLL1 WorldShape_getSensorWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 WorldShape_getSensorHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 WorldShape_SetFieldSize_FLOAT32_FLOAT32(void* impl, float width, float height);
  E_DLL0 int E_DLL1 WorldShape_getFieldWidth_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_getFieldHeight_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_SetResolution_FLOAT32_FLOAT32(void* impl, float resolutionX, float resolutionY);
  E_DLL0 int E_DLL1 WorldShape_SetResolution_FLOAT32(void* impl, float resolutionX);
  E_DLL0 int E_DLL1 WorldShape_getXResolution_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_getYResolution_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_getScale_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_setScale_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 WorldShape_getRatio_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_SetCenter_FLOAT32_FLOAT32(void* impl, float centerX, float centerY);
  E_DLL0 int E_DLL1 WorldShape_getCenterX_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_getCenterY_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_SetAngle_FLOAT32_FLOAT32(void* impl, float angle, float world);
  E_DLL0 int E_DLL1 WorldShape_GetAngle_BOOL_FLOAT32(void* impl, int world, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_GetAngle_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_getCalibrationModes_UINT32(void* impl, unsigned int* retVal);
  E_DLL0 int E_DLL1 WorldShape_setCalibrationModes_UINT32(void* impl, unsigned int retVal);
  E_DLL0 int E_DLL1 WorldShape_getTiltXAngle_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_getTiltYAngle_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_setDistortion_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 WorldShape_getDistortionStrength_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_getPerspectiveStrength_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_SetPerspective_FLOAT32_FLOAT32_FLOAT32(void* impl, float tiltX, float tiltY, float perspectiveStrength);
  E_DLL0 int E_DLL1 WorldShape_SensorToWorld_Point_Point(void* impl, void* sensorPoint, void** retVal);
  E_DLL0 int E_DLL1 WorldShape_WorldToSensor_Point_Point(void* impl, void* worldPoint, void** retVal);
  E_DLL0 int E_DLL1 WorldShape_Unwarp_ROIBW8_ROIBW8_BOOL(void* impl, void** sourceImage, void** destinationImage, int interpolate);
  E_DLL0 int E_DLL1 WorldShape_Load_ConstString_BOOL(void* impl, const char* pathName, int daughters);
  E_DLL0 int E_DLL1 WorldShape_Load_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 WorldShape_Save_ConstString_BOOL(void* impl, const char* pathName, int daughters);
  E_DLL0 int E_DLL1 WorldShape_Save_ConstString(void* impl, const char* pathName);
  E_DLL0 int E_DLL1 WorldShape_Draw_DrawAdapter_DrawingMode_BOOL(void* impl, void* context, int drawingModes, int daughters);
  E_DLL0 int E_DLL1 WorldShape_Draw_DrawAdapter_DrawingMode(void* impl, void* context, int drawingModes);
  E_DLL0 int E_DLL1 WorldShape_Draw_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 WorldShape_DrawGrid_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 WorldShape_DrawCrossGrid_DrawAdapter_FLOAT32_FLOAT32_FLOAT32_FLOAT32_UINT32_UINT32(void* impl, void* context, float minimumX, float maximumX, float minimumY, float maximumY, unsigned int numberOfIntervalsX, unsigned int numberOfIntervalsY);
  E_DLL0 int E_DLL1 WorldShape_DrawCrossGrid_DrawAdapter_FLOAT32_FLOAT32_FLOAT32_FLOAT32_UINT32(void* impl, void* context, float minimumX, float maximumX, float minimumY, float maximumY, unsigned int numberOfIntervalsX);
  E_DLL0 int E_DLL1 WorldShape_DrawCrossGrid_DrawAdapter_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, float minimumX, float maximumX, float minimumY, float maximumY);
  E_DLL0 int E_DLL1 WorldShape_DrawCrossGrid_DrawAdapter_FLOAT32_FLOAT32_FLOAT32(void* impl, void* context, float minimumX, float maximumX, float minimumY);
  E_DLL0 int E_DLL1 WorldShape_DrawCrossGrid_DrawAdapter_FLOAT32_FLOAT32(void* impl, void* context, float minimumX, float maximumX);
  E_DLL0 int E_DLL1 WorldShape_DrawCrossGrid_DrawAdapter_FLOAT32(void* impl, void* context, float minimumX);
  E_DLL0 int E_DLL1 WorldShape_DrawCrossGrid_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 WorldShape_SetZoom_FLOAT32_FLOAT32(void* impl, float zoomX, float zoomY);
  E_DLL0 int E_DLL1 WorldShape_SetZoom_FLOAT32(void* impl, float zoomX);
  E_DLL0 int E_DLL1 WorldShape_SetZoom(void* impl);
  E_DLL0 int E_DLL1 WorldShape_SetPan_FLOAT32_FLOAT32(void* impl, float panX, float panY);
  E_DLL0 int E_DLL1 WorldShape_SetPan_FLOAT32(void* impl, float panX);
  E_DLL0 int E_DLL1 WorldShape_SetPan(void* impl);
  E_DLL0 int E_DLL1 WorldShape_getZoomX_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_getZoomY_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_getPanX_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_getPanY_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 WorldShape_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 WorldShape_AutoCalibrateDotGrid_ROIBW8_FLOAT32_FLOAT32_BOOL_UINT32(void* impl, void** sourceImage, float columnPitch, float rowPitch, int testEmpiricalModes, unsigned int* retVal);
  E_DLL0 int E_DLL1 WorldShape_AutoCalibrateDotGrid_ROIBW8_FLOAT32_FLOAT32_UINT32(void* impl, void** sourceImage, float columnPitch, float rowPitch, unsigned int* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  WorldShape_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  WorldShape_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 WorldShape_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 WorldShape_Dtor(void* impl);
  E_DLL0 int E_DLL1 Xyz_getX_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Xyz_setX_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Xyz_getY_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Xyz_setY_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Xyz_getZ_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Xyz_setZ_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Xyz_Ctor(void** impl, int handle);
  E_DLL0 void E_DLL1 Xyz_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Xyz_Dtor(void* impl);
  E_DLL0 int E_DLL1 Rgb_getR_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Rgb_setR_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Rgb_getG_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Rgb_setG_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Rgb_getB_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Rgb_setB_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Rgb_Ctor(void** impl, int handle);
  E_DLL0 void E_DLL1 Rgb_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Rgb_Dtor(void* impl);
  E_DLL0 int E_DLL1 Yuv_getY_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Yuv_setY_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Yuv_getU_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Yuv_setU_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Yuv_getV_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Yuv_setV_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Yuv_Ctor(void** impl, int handle);
  E_DLL0 void E_DLL1 Yuv_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Yuv_Dtor(void* impl);
  E_DLL0 int E_DLL1 Yiq_getY_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Yiq_setY_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Yiq_getI_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Yiq_setI_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Yiq_getQ_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Yiq_setQ_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Yiq_Ctor(void** impl, int handle);
  E_DLL0 void E_DLL1 Yiq_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Yiq_Dtor(void* impl);
  E_DLL0 int E_DLL1 Lsh_getL_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Lsh_setL_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Lsh_getS_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Lsh_setS_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Lsh_getH_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Lsh_setH_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Lsh_Ctor(void** impl, int handle);
  E_DLL0 void E_DLL1 Lsh_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Lsh_Dtor(void* impl);
  E_DLL0 int E_DLL1 Vsh_getV_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Vsh_setV_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Vsh_getS_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Vsh_setS_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Vsh_getH_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Vsh_setH_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Vsh_Ctor(void** impl, int handle);
  E_DLL0 void E_DLL1 Vsh_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Vsh_Dtor(void* impl);
  E_DLL0 int E_DLL1 Ish_getI_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Ish_setI_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Ish_getS_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Ish_setS_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Ish_getH_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Ish_setH_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Ish_Ctor(void** impl, int handle);
  E_DLL0 void E_DLL1 Ish_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Ish_Dtor(void* impl);
  E_DLL0 int E_DLL1 Ysh_getY_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Ysh_setY_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Ysh_getS_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Ysh_setS_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Ysh_getH_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Ysh_setH_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Ysh_Ctor(void** impl, int handle);
  E_DLL0 void E_DLL1 Ysh_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Ysh_Dtor(void* impl);
  E_DLL0 int E_DLL1 Lab_getL_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Lab_setL_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Lab_getA_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Lab_setA_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Lab_getB_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Lab_setB_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Lab_Ctor(void** impl, int handle);
  E_DLL0 void E_DLL1 Lab_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Lab_Dtor(void* impl);
  E_DLL0 int E_DLL1 Lch_getL_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Lch_setL_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Lch_getC_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Lch_setC_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Lch_getH_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Lch_setH_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Lch_Ctor(void** impl, int handle);
  E_DLL0 void E_DLL1 Lch_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Lch_Dtor(void* impl);
  E_DLL0 int E_DLL1 Luv_getL_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Luv_setL_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Luv_getU_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Luv_setU_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Luv_getV_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Luv_setV_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Luv_Ctor(void** impl, int handle);
  E_DLL0 void E_DLL1 Luv_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Luv_Dtor(void* impl);
  E_DLL0 int E_DLL1 RgbColor_getRed_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 RgbColor_setRed_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 RgbColor_getGreen_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 RgbColor_setGreen_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 RgbColor_getBlue_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 RgbColor_setBlue_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 RgbColor_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 RgbColor_Ctor_INT32_INT32_INT32(void** impl, int red, int green, int blue, int handle);
  E_DLL0 void E_DLL1 RgbColor_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 RgbColor_Dtor(void* impl);
  E_DLL0 int E_DLL1 BW1_getValue_UINT32(void* impl, unsigned int* retVal);
  E_DLL0 int E_DLL1 BW1_setValue_UINT32(void* impl, unsigned int retVal);
  E_DLL0 int E_DLL1 BW1_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 BW1_Ctor_UINT32(void** impl, unsigned int value, int handle);
  E_DLL0 void E_DLL1 BW1_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 BW1_Dtor(void* impl);
  E_DLL0 int E_DLL1 BW8_getValue_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 BW8_setValue_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 BW8_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 BW8_Ctor_UINT8(void** impl, unsigned __int8 value, int handle);
  E_DLL0 void E_DLL1 BW8_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 BW8_Dtor(void* impl);
  E_DLL0 int E_DLL1 BW16_getValue_UINT16(void* impl, unsigned short* retVal);
  E_DLL0 int E_DLL1 BW16_setValue_UINT16(void* impl, unsigned short retVal);
  E_DLL0 int E_DLL1 BW16_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 BW16_Ctor_UINT16(void** impl, unsigned short value, int handle);
  E_DLL0 void E_DLL1 BW16_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 BW16_Dtor(void* impl);
  E_DLL0 int E_DLL1 BW32_getValue_UINT32(void* impl, unsigned int* retVal);
  E_DLL0 int E_DLL1 BW32_setValue_UINT32(void* impl, unsigned int retVal);
  E_DLL0 int E_DLL1 BW32_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 BW32_Ctor_UINT32(void** impl, unsigned int value, int handle);
  E_DLL0 void E_DLL1 BW32_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 BW32_Dtor(void* impl);
  E_DLL0 int E_DLL1 C24_getC0_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 C24_setC0_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 C24_getC1_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 C24_setC1_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 C24_getC2_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 C24_setC2_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 C24_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 C24_Ctor_UINT8_UINT8_UINT8(void** impl, unsigned __int8 C0, unsigned __int8 C1, unsigned __int8 C2, int handle);
  E_DLL0 void E_DLL1 C24_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 C24_Dtor(void* impl);
  E_DLL0 int E_DLL1 C24A_getC0_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 C24A_setC0_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 C24A_getC1_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 C24A_setC1_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 C24A_getC2_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 C24A_setC2_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 C24A_getA_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 C24A_setA_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 C24A_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 C24A_Ctor_UINT8_UINT8_UINT8(void** impl, unsigned __int8 C0, unsigned __int8 C1, unsigned __int8 C2, int handle);
  E_DLL0 void E_DLL1 C24A_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 C24A_Dtor(void* impl);
  E_DLL0 int E_DLL1 C15_getC0_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 C15_setC0_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 C15_getC1_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 C15_setC1_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 C15_getC2_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 C15_setC2_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 C15_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 C15_Ctor_UINT8_UINT8_UINT8(void** impl, unsigned __int8 C0, unsigned __int8 C1, unsigned __int8 C2, int handle);
  E_DLL0 void E_DLL1 C15_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 C15_Dtor(void* impl);
  E_DLL0 int E_DLL1 C16_getC0_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 C16_setC0_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 C16_getC1_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 C16_setC1_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 C16_getC2_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 C16_setC2_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 C16_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 C16_Ctor_UINT8_UINT8_UINT8(void** impl, unsigned __int8 C0, unsigned __int8 C1, unsigned __int8 C2, int handle);
  E_DLL0 void E_DLL1 C16_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 C16_Dtor(void* impl);
  E_DLL0 int E_DLL1 GenericColor_getC0_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 GenericColor_setC0_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 GenericColor_getC1_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 GenericColor_setC1_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 GenericColor_getC2_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 GenericColor_setC2_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 GenericColor_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 GenericColor_Ctor_FLOAT32_FLOAT32_FLOAT32(void** impl, float C0, float C1, float C2, int handle);
  E_DLL0 void E_DLL1 GenericColor_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 GenericColor_Dtor(void* impl);
  E_DLL0 int E_DLL1 TripletUINT8_Ctor_UINT8_UINT8_UINT8(void** impl, unsigned __int8 v0, unsigned __int8 v1, unsigned __int8 v2, int handle);
  E_DLL0 int E_DLL1 TripletUINT8_getv0_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 TripletUINT8_setv0_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 TripletUINT8_getv1_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 TripletUINT8_setv1_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 int E_DLL1 TripletUINT8_getv2_UINT8(void* impl, unsigned __int8* retVal);
  E_DLL0 int E_DLL1 TripletUINT8_setv2_UINT8(void* impl, unsigned __int8 retVal);
  E_DLL0 void E_DLL1 TripletUINT8_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 TripletUINT8_Dtor(void* impl);
  E_DLL0 int E_DLL1 TripletFLOAT_Ctor_FLOAT32_FLOAT32_FLOAT32(void** impl, float v0, float v1, float v2, int handle);
  E_DLL0 int E_DLL1 TripletFLOAT_getv0_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 TripletFLOAT_setv0_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 TripletFLOAT_getv1_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 TripletFLOAT_setv1_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 TripletFLOAT_getv2_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 TripletFLOAT_setv2_FLOAT32(void* impl, float retVal);
  E_DLL0 void E_DLL1 TripletFLOAT_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 TripletFLOAT_Dtor(void* impl);
  E_DLL0 int E_DLL1 PointF_getx_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 PointF_setx_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 PointF_gety_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 PointF_sety_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 PointF_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 PointF_Ctor_FLOAT32_FLOAT32(void** impl, float x, float y, int handle);
  E_DLL0 void E_DLL1 PointF_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 PointF_Dtor(void* impl);
  E_DLL0 int E_DLL1 Point_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 Point_Ctor_FLOAT32_FLOAT32(void** impl, float centerX, float centerY, int handle);
  E_DLL0 int E_DLL1 Point_Ctor_Point(void** impl, void* other, int handle);
  E_DLL0 int E_DLL1 Point_CopyTo_Point_Point(void* impl, void** destinationImage, void** retVal);
  E_DLL0 int E_DLL1 Point_Set_FLOAT32_FLOAT32(void* impl, float centerX, float centerY);
  E_DLL0 int E_DLL1 Point_SetCenter_FLOAT32_FLOAT32(void* impl, float centerX, float centerY);
  E_DLL0 int E_DLL1 Point_getX_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Point_getY_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Point_getCenter_Point(void* impl, void** retVal);
  E_DLL0 int E_DLL1 Point_setCenter_Point(void* impl, void* retVal);
  E_DLL0 int E_DLL1 Point_MidPoint_Point_Point(void* impl, void* point, void** retVal);
  E_DLL0 int E_DLL1 Point_Rotate_FLOAT32_Point(void* impl, float angle, void** retVal);
  E_DLL0 int E_DLL1 Point_Square_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Point_Modulus_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Point_Argument_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Point_Dot_Point_FLOAT32(void* impl, void* point, float* retVal);
  E_DLL0 int E_DLL1 Point_Area_Point_FLOAT32(void* impl, void* point, float* retVal);
  E_DLL0 int E_DLL1 Point_Project_Line_Point(void* impl, void* line, void** retVal);
  E_DLL0 int E_DLL1 Point_Project_Circle_Point(void* impl, void* circle, void** retVal);
  E_DLL0 int E_DLL1 Point_SquaredDistance_Point_FLOAT32(void* impl, void* point, float* retVal);
  E_DLL0 int E_DLL1 Point_Distance_Point_FLOAT32(void* impl, void* point, float* retVal);
  E_DLL0 int E_DLL1 Point_Distance_Line_BOOL_FLOAT32(void* impl, void* line, int segmentOnly, float* retVal);
  E_DLL0 int E_DLL1 Point_Distance_Line_FLOAT32(void* impl, void* line, float* retVal);
  E_DLL0 int E_DLL1 Point_Distance_Circle_BOOL_FLOAT32(void* impl, void* circle, int arcOnly, float* retVal);
  E_DLL0 int E_DLL1 Point_Distance_Circle_FLOAT32(void* impl, void* circle, float* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  Point_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  Point_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 Point_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Point_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertFrameToPoint(void** dst, void* src);
  E_DLL0 int E_DLL1 Frame_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 Frame_Ctor_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void** impl, float centerX, float centerY, float angle, float scale, int handle);
  E_DLL0 int E_DLL1 Frame_Ctor_FLOAT32_FLOAT32_FLOAT32(void** impl, float centerX, float centerY, float angle, int handle);
  E_DLL0 int E_DLL1 Frame_Ctor_FLOAT32_FLOAT32(void** impl, float centerX, float centerY, int handle);
  E_DLL0 int E_DLL1 Frame_Ctor_Frame(void** impl, void* frame, int handle);
  E_DLL0 int E_DLL1 Frame_CopyTo_Frame_Frame(void* impl, void** destinationImage, void** retVal);
  E_DLL0 int E_DLL1 Frame_Set_Point_FLOAT32_FLOAT32(void* impl, void* center, float angle, float scale);
  E_DLL0 int E_DLL1 Frame_Set_Point_FLOAT32(void* impl, void* center, float angle);
  E_DLL0 int E_DLL1 Frame_Set_Point(void* impl, void* center);
  E_DLL0 int E_DLL1 Frame_getAngle_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Frame_setAngle_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Frame_getScale_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Frame_setScale_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Frame_getCenterX_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Frame_getCenterY_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Frame_ValidateFrame_Frame(void* impl, void** mother);
  E_DLL0 int E_DLL1 Frame_InvalidateFrame(void* impl);
  E_DLL0 int E_DLL1 Frame_LocalToGlobal_Point_Point(void* impl, void* point, void** retVal);
  E_DLL0 int E_DLL1 Frame_LocalToGlobal_Frame_Frame(void* impl, void* frame, void** retVal);
  E_DLL0 int E_DLL1 Frame_LocalToGlobal_Line_Line(void* impl, void* line, void** retVal);
  E_DLL0 int E_DLL1 Frame_LocalToGlobal_Circle_Circle(void* impl, void* circle, void** retVal);
  E_DLL0 int E_DLL1 Frame_GlobalToLocal_Point_Point(void* impl, void* point, void** retVal);
  E_DLL0 int E_DLL1 Frame_GlobalToLocal_Frame_Frame(void* impl, void* frame, void** retVal);
  E_DLL0 int E_DLL1 Frame_ResetFit(void* impl);
  E_DLL0 int E_DLL1 Frame_AccumulateFit_Point_Point(void* impl, void* world, void* local);
  E_DLL0 int E_DLL1 Frame_Fit_UINT32(void* impl, unsigned int calibrationModes);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  Frame_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  Frame_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 Frame_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Frame_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertLineToFrame(void** dst, void* src);
  E_DLL0 int E_DLL1 Line_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 Line_Ctor_Point_FLOAT32_FLOAT32(void** impl, void* center, float length, float angle, int handle);
  E_DLL0 int E_DLL1 Line_Ctor_Point_FLOAT32(void** impl, void* center, float length, int handle);
  E_DLL0 int E_DLL1 Line_Ctor_Point_Point(void** impl, void* origin, void* end, int handle);
  E_DLL0 int E_DLL1 Line_Ctor_Line(void** impl, void* other, int handle);
  E_DLL0 int E_DLL1 Line_CopyTo_Line_Line(void* impl, void** destinationImage, void** retVal);
  E_DLL0 int E_DLL1 Line_Set_Point_FLOAT32_FLOAT32(void* impl, void* center, float length, float angle);
  E_DLL0 int E_DLL1 Line_Set_Point_Point(void* impl, void* origin, void* end);
  E_DLL0 int E_DLL1 Line_getLength_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Line_setLength_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Line_getOrg_Point(void* impl, void** retVal);
  E_DLL0 int E_DLL1 Line_getEnd_Point(void* impl, void** retVal);
  E_DLL0 int E_DLL1 Line_getPoint_FLOAT32_Point(void* impl, float fraction, void** retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  Line_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  Line_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 Line_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Line_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertRectangleToFrame(void** dst, void* src);
  E_DLL0 int E_DLL1 Rectangle_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 Rectangle_Ctor_Point_FLOAT32_FLOAT32_FLOAT32(void** impl, void* point, float sizeX, float sizeY, float angle, int handle);
  E_DLL0 int E_DLL1 Rectangle_Ctor_Point_FLOAT32_FLOAT32(void** impl, void* point, float sizeX, float sizeY, int handle);
  E_DLL0 int E_DLL1 Rectangle_Ctor_Point_Point(void** impl, void* origin, void* end, int handle);
  E_DLL0 int E_DLL1 Rectangle_Ctor_Point_Point_Point(void** impl, void* origin, void* middle, void* end, int handle);
  E_DLL0 int E_DLL1 Rectangle_Ctor_Rectangle(void** impl, void* other, int handle);
  E_DLL0 int E_DLL1 Rectangle_CopyTo_Rectangle_Rectangle(void* impl, void** destinationImage, void** retVal);
  E_DLL0 int E_DLL1 Rectangle_Set_Rectangle_FLOAT32_FLOAT32_FLOAT32(void* impl, void* center, float sizeX, float sizeY, float angle);
  E_DLL0 int E_DLL1 Rectangle_Set_Rectangle_Rectangle(void* impl, void* origin, void* end);
  E_DLL0 int E_DLL1 Rectangle_Set_Rectangle_Rectangle_Rectangle(void* impl, void* origin, void* middle, void* end);
  E_DLL0 int E_DLL1 Rectangle_SetSize_FLOAT32_FLOAT32(void* impl, float sizeX, float sizeY);
  E_DLL0 int E_DLL1 Rectangle_getSizeX_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Rectangle_getSizeY_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Rectangle_GetPoint_FLOAT32_FLOAT32_Point(void* impl, float fractionX, float fractionY, void** retVal);
  E_DLL0 int E_DLL1 Rectangle_GetMidEdges_Point_Point_Point_Point(void* impl, void** x, void** X, void** y, void** Y);
  E_DLL0 int E_DLL1 Rectangle_GetCorners_Point_Point_Point_Point(void* impl, void** xy, void** Xy, void** xY, void** XY);
  E_DLL0 int E_DLL1 Rectangle_GetEdges_Line_Line_Line_Line(void* impl, void** x, void** X, void** y, void** Y);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  Rectangle_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  Rectangle_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 Rectangle_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Rectangle_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertCircleToFrame(void** dst, void* src);
  E_DLL0 int E_DLL1 Circle_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 Circle_Ctor_Point_FLOAT32_FLOAT32_BOOL(void** impl, void* center, float diameter, float originAngle, int direct, int handle);
  E_DLL0 int E_DLL1 Circle_Ctor_Point_FLOAT32_FLOAT32(void** impl, void* center, float diameter, float originAngle, int handle);
  E_DLL0 int E_DLL1 Circle_Ctor_Point_Point_BOOL(void** impl, void* center, void* origin, int direct, int handle);
  E_DLL0 int E_DLL1 Circle_Ctor_Point_Point(void** impl, void* center, void* origin, int handle);
  E_DLL0 int E_DLL1 Circle_Ctor_Point_FLOAT32_FLOAT32_FLOAT32(void** impl, void* center, float diameter, float originAngle, float amplitude, int handle);
  E_DLL0 int E_DLL1 Circle_Ctor_Point_Point_Point_BOOL(void** impl, void* origin, void* middle, void* end, int fullCircle, int handle);
  E_DLL0 int E_DLL1 Circle_Ctor_Point_Point_Point(void** impl, void* origin, void* middle, void* end, int handle);
  E_DLL0 int E_DLL1 Circle_Ctor_Circle(void** impl, void* other, int handle);
  E_DLL0 int E_DLL1 Circle_CopyTo_Circle_Circle(void* impl, void** destinationImage, void** retVal);
  E_DLL0 int E_DLL1 Circle_Set_Point_FLOAT32_FLOAT32_BOOL(void* impl, void* center, float diameter, float originAngle, int direct);
  E_DLL0 int E_DLL1 Circle_Set_Point_FLOAT32_FLOAT32(void* impl, void* center, float diameter, float originAngle);
  E_DLL0 int E_DLL1 Circle_Set_Point_FLOAT32(void* impl, void* center, float diameter);
  E_DLL0 int E_DLL1 Circle_Set_Point_FLOAT32_FLOAT32_FLOAT32(void* impl, void* center, float diameter, float originAngle, float amplitude);
  E_DLL0 int E_DLL1 Circle_Set_Point_Point_Point_BOOL(void* impl, void* origin, void* middle, void* end, int fullCircle);
  E_DLL0 int E_DLL1 Circle_Set_Point_Point_Point(void* impl, void* origin, void* middle, void* end);
  E_DLL0 int E_DLL1 Circle_getRadius_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Circle_setRadius_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Circle_getDiameter_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Circle_setDiameter_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Circle_getArcLength_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Circle_getOrgAngle_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Circle_getApexAngle_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Circle_getEndAngle_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Circle_getAmplitude_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Circle_setAmplitude_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Circle_getOrg_Point(void* impl, void** retVal);
  E_DLL0 int E_DLL1 Circle_getApex_Point(void* impl, void** retVal);
  E_DLL0 int E_DLL1 Circle_getEnd_Point(void* impl, void** retVal);
  E_DLL0 int E_DLL1 Circle_getPoint_FLOAT32_Point(void* impl, float fraction, void** retVal);
  E_DLL0 int E_DLL1 Circle_getFull_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 Circle_getDirect_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 Circle_Distance_Circle_FLOAT32(void* impl, void** circle, float* retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  Circle_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  Circle_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 Circle_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Circle_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertWedgeToFrame(void** dst, void* src);
  E_DLL0 int E_DLL1 Wedge_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 Wedge_Ctor_Point_FLOAT32_FLOAT32_FLOAT32_BOOL(void** impl, void* center, float diameter, float breadth, float originAngle, int direct, int handle);
  E_DLL0 int E_DLL1 Wedge_Ctor_Point_FLOAT32_FLOAT32_FLOAT32(void** impl, void* center, float diameter, float breadth, float originAngle, int handle);
  E_DLL0 int E_DLL1 Wedge_Ctor_Point_FLOAT32_FLOAT32(void** impl, void* center, float diameter, float breadth, int handle);
  E_DLL0 int E_DLL1 Wedge_Ctor_Point_FLOAT32(void** impl, void* center, float diameter, int handle);
  E_DLL0 int E_DLL1 Wedge_Ctor_Point_Point_FLOAT32_BOOL(void** impl, void* center, void* origin, float breadth, int direct, int handle);
  E_DLL0 int E_DLL1 Wedge_Ctor_Point_Point_FLOAT32(void** impl, void* center, void* origin, float breadth, int handle);
  E_DLL0 int E_DLL1 Wedge_Ctor_Point_Point(void** impl, void* center, void* origin, int handle);
  E_DLL0 int E_DLL1 Wedge_Ctor_Point_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void** impl, void* center, float diameter, float breadth, float originAngle, float amplitude, int handle);
  E_DLL0 int E_DLL1 Wedge_Ctor_Point_Point_Point_FLOAT32_BOOL(void** impl, void* origin, void* middle, void* end, float breadth, int fullCircle, int handle);
  E_DLL0 int E_DLL1 Wedge_Ctor_Point_Point_Point_FLOAT32(void** impl, void* origin, void* middle, void* end, float breadth, int handle);
  E_DLL0 int E_DLL1 Wedge_Ctor_Point_Point_Point(void** impl, void* origin, void* middle, void* end, int handle);
  E_DLL0 int E_DLL1 Wedge_Ctor_Wedge(void** impl, void* other, int handle);
  E_DLL0 int E_DLL1 Wedge_CopyTo_Wedge_Wedge(void* impl, void** destinationImage, void** retVal);
  E_DLL0 int E_DLL1 Wedge_Set_Point_FLOAT32_FLOAT32_FLOAT32_BOOL(void* impl, void* center, float diameter, float breadth, float originAngle, int direct);
  E_DLL0 int E_DLL1 Wedge_Set_Point_FLOAT32_FLOAT32_FLOAT32(void* impl, void* center, float diameter, float breadth, float originAngle);
  E_DLL0 int E_DLL1 Wedge_Set_Point_FLOAT32_FLOAT32(void* impl, void* center, float diameter, float breadth);
  E_DLL0 int E_DLL1 Wedge_Set_Point_FLOAT32(void* impl, void* center, float diameter);
  E_DLL0 int E_DLL1 Wedge_Set_Point_FLOAT32_FLOAT32_FLOAT32_FLOAT32(void* impl, void* center, float diameter, float breadth, float originAngle, float amplitude);
  E_DLL0 int E_DLL1 Wedge_Set_Point_Point_FLOAT32_BOOL(void* impl, void* center, void* origin, float breadth, int direct);
  E_DLL0 int E_DLL1 Wedge_Set_Point_Point_FLOAT32(void* impl, void* center, void* origin, float breadth);
  E_DLL0 int E_DLL1 Wedge_Set_Point_Point(void* impl, void* center, void* origin);
  E_DLL0 int E_DLL1 Wedge_Set_Point_Point_Point_FLOAT32_BOOL(void* impl, void* origin, void* middle, void* end, float breadth, int fullCircle);
  E_DLL0 int E_DLL1 Wedge_Set_Point_Point_Point_FLOAT32(void* impl, void* origin, void* middle, void* end, float breadth);
  E_DLL0 int E_DLL1 Wedge_Set_Point_Point_Point(void* impl, void* origin, void* middle, void* end);
  E_DLL0 int E_DLL1 Wedge_getAmplitude_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Wedge_setAmplitude_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 Wedge_SetRadii_FLOAT32_FLOAT32(void* impl, float radius, float breadth);
  E_DLL0 int E_DLL1 Wedge_SetRadii_FLOAT32(void* impl, float radius);
  E_DLL0 int E_DLL1 Wedge_SetDiameters_FLOAT32_FLOAT32(void* impl, float diameter, float breadth);
  E_DLL0 int E_DLL1 Wedge_SetDiameters_FLOAT32(void* impl, float diameter);
  E_DLL0 int E_DLL1 Wedge_getInnerDiameter_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Wedge_getOuterDiameter_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Wedge_getInnerRadius_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Wedge_getOuterRadius_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Wedge_getBreadth_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Wedge_getInnerArcLength_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Wedge_getOuterArcLength_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Wedge_getOrgAngle_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Wedge_getApexAngle_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Wedge_getEndAngle_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 Wedge_getInnerOrg_Point(void* impl, void** retVal);
  E_DLL0 int E_DLL1 Wedge_getInnerApex_Point(void* impl, void** retVal);
  E_DLL0 int E_DLL1 Wedge_getInnerEnd_Point(void* impl, void** retVal);
  E_DLL0 int E_DLL1 Wedge_getOuterOrg_Point(void* impl, void** retVal);
  E_DLL0 int E_DLL1 Wedge_getOuterApex_Point(void* impl, void** retVal);
  E_DLL0 int E_DLL1 Wedge_getOuterEnd_Point(void* impl, void** retVal);
  E_DLL0 int E_DLL1 Wedge_getInnerPoint_FLOAT32_Point(void* impl, float fraction, void** retVal);
  E_DLL0 int E_DLL1 Wedge_getOuterPoint_FLOAT32_Point(void* impl, float fraction, void** retVal);
  E_DLL0 int E_DLL1 Wedge_GetPoint_FLOAT32_FLOAT32_Point(void* impl, float breadthFraction, float angleFraction, void** retVal);
  E_DLL0 int E_DLL1 Wedge_getFullBreadth_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 Wedge_getFullCircle_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 Wedge_getDirect_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 Wedge_GetMidEdges_Point_Point_Point_Point(void* impl, void** a, void** A, void** r, void** R);
  E_DLL0 int E_DLL1 Wedge_GetCorners_Point_Point_Point_Point(void* impl, void** ar, void** Ar, void** aR, void** AR);
  E_DLL0 int E_DLL1 Wedge_GetEdges_Line_Line_Circle_Circle(void* impl, void** a, void** A, void** r, void** R);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  Wedge_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  Wedge_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 Wedge_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 Wedge_Dtor(void* impl);
  E_DLL0 void E_DLL1 ConvertFrameShapeToShape(void** dst, void* src);
  E_DLL0 int E_DLL1 FrameShape_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 FrameShape_Ctor_FrameShape(void** impl, void** frameShape, int handle);
  E_DLL0 int E_DLL1 FrameShape_Set_Point_FLOAT32(void* impl, void* center, float angle);
  E_DLL0 int E_DLL1 FrameShape_Set_Point(void* impl, void* center);
  E_DLL0 int E_DLL1 FrameShape_SetCenter_Point(void* impl, void* center);
  E_DLL0 int E_DLL1 FrameShape_SetCenter_FLOAT32_FLOAT32(void* impl, float centerX, float centerY);
  E_DLL0 int E_DLL1 FrameShape_SetAngle_FLOAT32(void* impl, float angle);
  E_DLL0 int E_DLL1 FrameShape_SetSize_FLOAT32_FLOAT32(void* impl, float sizeX, float sizeY);
  E_DLL0 int E_DLL1 FrameShape_SetSize_FLOAT32(void* impl, float sizeX);
  E_DLL0 int E_DLL1 FrameShape_getSizeX_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 FrameShape_getSizeY_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 FrameShape_Attach_Shape(void* impl, void** mother);
  E_DLL0 int E_DLL1 FrameShape_Detach(void* impl);
  E_DLL0 int E_DLL1 FrameShape_DetachDaughters(void* impl);
  E_DLL0 int E_DLL1 FrameShape_getMother_Shape(void* impl, void** retVal);
  E_DLL0 int E_DLL1 FrameShape_getNumDaughters_UINT32(void* impl, unsigned int* retVal);
  E_DLL0 int E_DLL1 FrameShape_getDaughter_UINT32_Shape(void* impl, unsigned int daughterIndex, void** retVal);
  E_DLL0 int E_DLL1 FrameShape_Draw_DrawAdapter_DrawingMode_BOOL(void* impl, void* context, int drawingMode, int daughters);
  E_DLL0 int E_DLL1 FrameShape_Draw_DrawAdapter_DrawingMode(void* impl, void* context, int drawingMode);
  E_DLL0 int E_DLL1 FrameShape_Draw_DrawAdapter(void* impl, void* context);
  E_DLL0 int E_DLL1 FrameShape_HitTest_BOOL_BOOL(void* impl, int daughter, int* retVal);
  E_DLL0 int E_DLL1 FrameShape_HitTest_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 FrameShape_Drag_INT32_INT32(void* impl, int cursorX, int cursorY);
  E_DLL0 int E_DLL1 FrameShape_getDragable_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 FrameShape_setDragable_BOOL(void* impl, int retVal);
  E_DLL0 int E_DLL1 FrameShape_SetDragable_BOOL_BOOL(void* impl, int dragable, int daughters);
  E_DLL0 int E_DLL1 FrameShape_getRotatable_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 FrameShape_setRotatable_BOOL(void* impl, int retVal);
  E_DLL0 int E_DLL1 FrameShape_SetRotatable_BOOL_BOOL(void* impl, int rotatable, int daughters);
  E_DLL0 int E_DLL1 FrameShape_getResizable_BOOL(void* impl, int* retVal);
  E_DLL0 int E_DLL1 FrameShape_setResizable_BOOL(void* impl, int retVal);
  E_DLL0 int E_DLL1 FrameShape_SetResizable_BOOL_BOOL(void* impl, int resizable, int daughters);
  E_DLL0 int E_DLL1 FrameShape_CopyTo_FrameShape_BOOL_FrameShape(void* impl, void** destinationImage, int recursive, void** retVal);
  E_DLL0 int E_DLL1 FrameShape_getAngle_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 FrameShape_setAngle_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 FrameShape_getScale_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 FrameShape_setScale_FLOAT32(void* impl, float retVal);
  E_DLL0 int E_DLL1 FrameShape_getCenterX_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 FrameShape_getCenterY_FLOAT32(void* impl, float* retVal);
  E_DLL0 int E_DLL1 FrameShape_LocalToGlobal_Point_Point(void* impl, void* point, void** retVal);
  E_DLL0 int E_DLL1 FrameShape_LocalToGlobal_Frame_Frame(void* impl, void* frame, void** retVal);
  E_DLL0 int E_DLL1 FrameShape_LocalToGlobal_Line_Line(void* impl, void* line, void** retVal);
  E_DLL0 int E_DLL1 FrameShape_LocalToGlobal_Circle_Circle(void* impl, void* circle, void** retVal);
  E_DLL0 int E_DLL1 FrameShape_GlobalToLocal_Point_Point(void* impl, void* point, void** retVal);
  E_DLL0 int E_DLL1 FrameShape_GlobalToLocal_Frame_Frame(void* impl, void* frame, void** retVal);
  E_DLL0 int E_DLL1 FrameShape_ResetFit(void* impl);
  E_DLL0 int E_DLL1 FrameShape_AccumulateFit_Point_Point(void* impl, void* world, void* local);
  E_DLL0 int E_DLL1 FrameShape_Fit_UINT32(void* impl, unsigned int calibrationModes);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  FrameShape_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  FrameShape_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 FrameShape_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 FrameShape_Dtor(void* impl);
  E_DLL0 int E_DLL1 GenericRoiExtent_getOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 GenericRoiExtent_setOrgX_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 GenericRoiExtent_getOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 GenericRoiExtent_setOrgY_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 GenericRoiExtent_getWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 GenericRoiExtent_setWidth_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 GenericRoiExtent_getHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 GenericRoiExtent_setHeight_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 GenericRoiExtent_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtent_Ctor_EuresyseVisionROIBW1(void** impl, void** roi, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtent_Ctor_EuresyseVisionROIBW8(void** impl, void** roi, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtent_Ctor_EuresyseVisionROIBW16(void** impl, void** roi, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtent_Ctor_EuresyseVisionROIBW32(void** impl, void** roi, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtent_Ctor_EuresyseVisionROIC15(void** impl, void** roi, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtent_Ctor_EuresyseVisionROIC16(void** impl, void** roi, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtent_Ctor_EuresyseVisionROIC24(void** impl, void** roi, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtent_Ctor_EuresyseVisionROIC24A(void** impl, void** roi, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtent_Ctor_INT32_INT32_INT32_INT32(void** impl, int orgX, int orgY, int width, int height, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtent_Ctor_EuresyseVisionGenericRoiExtent(void** impl, void** genericRoiExtent, int handle);
  E_DLL0 void E_DLL1 GenericRoiExtent_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 GenericRoiExtent_Dtor(void* impl);
  E_DLL0 int E_DLL1 GenericRoiExtentWithBroadcast_Ctor_EuresyseVisionGenericRoiExtent(void** impl, void** genericRoiExtent, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtentWithBroadcast_Ctor_EuresyseVisionGenericRoiExtentWithBroadcast(void** impl, void** genericRoiExtentWithBroadcast, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtentWithBroadcast_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtentWithBroadcast_getOrgX_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 GenericRoiExtentWithBroadcast_setOrgX_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 GenericRoiExtentWithBroadcast_getOrgY_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 GenericRoiExtentWithBroadcast_setOrgY_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 GenericRoiExtentWithBroadcast_getWidth_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 GenericRoiExtentWithBroadcast_setWidth_INT32(void* impl, int retVal);
  E_DLL0 int E_DLL1 GenericRoiExtentWithBroadcast_getHeight_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 GenericRoiExtentWithBroadcast_setHeight_INT32(void* impl, int retVal);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  GenericRoiExtentWithBroadcast_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  GenericRoiExtentWithBroadcast_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 GenericRoiExtentWithBroadcast_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 GenericRoiExtentWithBroadcast_Dtor(void* impl);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_Ctor_INT32(void** impl, int size, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_Ctor(void** impl, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_Ctor_EuresysGenericRoiExtentBroadcastingVector(void** impl, void* genericRoiExtentBroadcastingVector, int handle);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_ItemAt_INT32_EuresyseVisionGenericRoiExtentWithBroadcast(void* impl, int index, void** retVal);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_Add_EuresyseVisionGenericRoiExtent(void* impl, void** item);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_AddOnce_EuresyseVisionGenericRoiExtent(void* impl, void** item);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_InsertItem_EuresyseVisionGenericRoiExtent_INT32(void* impl, void** item, int index);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_NbItems_INT32(void* impl, int* retVal);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_Find_EuresyseVisionGenericRoiExtent_INT32(void* impl, void** item, int* retVal);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_Contains_EuresyseVisionGenericRoiExtent_BOOL(void* impl, void** item, int* retVal);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_Clear(void* impl);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_Remove_EuresyseVisionGenericRoiExtent(void* impl, void** item);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_Remove_INT32(void* impl, int index);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_SetSize_INT32(void* impl, int size);
#ifdef EVISION_CLR
  E_DLL0 void E_DLL1  GenericRoiExtentBroadcastingVector_SetCallback(void** impl, [System::Runtime::InteropServices::MarshalAs(System::Runtime::InteropServices::UnmanagedType::FunctionPtr)]System::Delegate* callback, int handle);
#else
E_DLL0 void E_DLL1  GenericRoiExtentBroadcastingVector_SetCallback(void** impl, void* callback, int handle);
#endif //EVISION_CLR
    E_DLL0 void E_DLL1 GenericRoiExtentBroadcastingVector_GetWrapper(int* handle, void* impl);
  E_DLL0 int E_DLL1 GenericRoiExtentBroadcastingVector_Dtor(void* impl);
}

#endif // E_EXTERN_C_BUILD
#endif // __EASY_EXTERNC_INTERFACE_H__
