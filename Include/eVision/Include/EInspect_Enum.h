// EInspect_Enum.h: EasyInspect library header file for eVision 6.7.1.0
//
// Copyright ( c) 1997-2006, Euresys. All rights reserved.
//

#ifndef __EINSPECT_ENUM_H__
#define __EINSPECT_ENUM_H__


////////////////////////////////////////////////////////////////////////////////////////////////////
// Enumerated constants
//


// Shape types
enum INS_SHAPE_TYPES
{
  INS_NO_SHAPE        = 1 << 0,

  // Base shapes
  INS_POINT_SHAPE     = 1 << 2,
  INS_LINE_SHAPE      = 1 << 3,
  INS_CIRCLE_SHAPE    = 1 << 4,
  INS_WEDGE_SHAPE     = 1 << 5,
  INS_RECTANGLE_SHAPE = 1 << 6,
  INS_FRAME_SHAPE     = 1 << 7,
  INS_WORLD_SHAPE     = 1 << 8,
  INS_ANY_SHAPE       = INS_POINT_SHAPE | INS_LINE_SHAPE | INS_CIRCLE_SHAPE | INS_WEDGE_SHAPE | INS_RECTANGLE_SHAPE | INS_FRAME_SHAPE | INS_WORLD_SHAPE,

  // Gauging probes
  INS_POINT_GAUGE     = 1 << 9,
  INS_LINE_GAUGE      = 1 << 10,
  INS_CIRCLE_GAUGE    = 1 << 11,
  INS_RECTANGLE_GAUGE = 1 << 12,
  INS_WEDGE_GAUGE     = 1 << 17,
  INS_ANY_GAUGE       = INS_POINT_GAUGE | INS_LINE_GAUGE | INS_CIRCLE_GAUGE | INS_WEDGE_GAUGE | INS_RECTANGLE_GAUGE,

  // BGA components
  INS_BGA_BALL        = 1 << 13,
  INS_BGA_ARRAY       = 1 << 14,
  INS_BGA_COMPONENT   = 1 << 15,
  INS_BGA             = 1 << 16,

  // Pattern matchers
  INS_FIND            = 1 << 18,

  // Any
  INS_ANY_TYPE        = ~1,

  INS_SHAPE_UNKNOWN   = 0xFFFFFFFF
};

// Dragging modes
enum INS_DRAGGING_MODES 
{
  INS_DRAG_STANDARD, 
  INS_DRAG_TO_EDGES,
  INS_DRAG_UNKNOWN    = 0xFFFFFFFF
};

// Handle names
enum INS_HANDLES
{ 
  INS_HANDLE_NONE,
  INS_HANDLE_CENTER,
  INS_HANDLE_X_AXIS, 
  INS_HANDLE_Y_AXIS,
  INS_HANDLE_ORG, 
  INS_HANDLE_MID, 
  INS_HANDLE_END,
  INS_HANDLE_INNER_ORG, 
  INS_HANDLE_INNER_MID, 
  INS_HANDLE_INNER_END,

  INS_HANDLE_TOL_0, 
  INS_HANDLE_TOL_1,

  INS_HANDLE_TOL_x0, 
  INS_HANDLE_TOL_x1,
  INS_HANDLE_TOL_y0, 
  INS_HANDLE_TOL_y1,
  INS_HANDLE_TOL_X0, 
  INS_HANDLE_TOL_X1,
  INS_HANDLE_TOL_Y0, 
  INS_HANDLE_TOL_Y1,

  INS_HANDLE_OUTER_ORG      = INS_HANDLE_ORG, 
  INS_HANDLE_OUTER_MID      = INS_HANDLE_MID, 
  INS_HANDLE_OUTER_END      = INS_HANDLE_END,

  INS_HANDLE_TOL_a0         = INS_HANDLE_TOL_x0, 
  INS_HANDLE_TOL_a1         = INS_HANDLE_TOL_x1,
  INS_HANDLE_TOL_A0         = INS_HANDLE_TOL_y0, 
  INS_HANDLE_TOL_A1         = INS_HANDLE_TOL_y1,
  INS_HANDLE_TOL_r0         = INS_HANDLE_TOL_X0, 
  INS_HANDLE_TOL_r1         = INS_HANDLE_TOL_X1,
  INS_HANDLE_TOL_R0         = INS_HANDLE_TOL_Y0, 
  INS_HANDLE_TOL_R1         = INS_HANDLE_TOL_Y1,

  INS_HANDLE_EDGE_x         = 0x100,
  INS_HANDLE_EDGE_X         = 0x200, 
  INS_HANDLE_EDGE_y         = 0x400,
  INS_HANDLE_EDGE_Y         = 0x800,

  INS_HANDLE_CORNER_xy      = 0x1000, 
  INS_HANDLE_CORNER_Xy      = 0x2000, 
  INS_HANDLE_CORNER_xY      = 0x4000, 
  INS_HANDLE_CORNER_XY      = 0x8000,

  INS_HANDLE_EDGE_a         = INS_HANDLE_EDGE_x,
  INS_HANDLE_EDGE_A         = INS_HANDLE_EDGE_X, 
  INS_HANDLE_EDGE_r         = INS_HANDLE_EDGE_y,
  INS_HANDLE_EDGE_R         = INS_HANDLE_EDGE_Y,

  INS_HANDLE_CORNER_ar      = INS_HANDLE_CORNER_xy, 
  INS_HANDLE_CORNER_Ar      = INS_HANDLE_CORNER_Xy, 
  INS_HANDLE_CORNER_aR      = INS_HANDLE_CORNER_xY, 
  INS_HANDLE_CORNER_AR      = INS_HANDLE_CORNER_XY,

  INS_EDGE_x                = INS_HANDLE_EDGE_x,
  INS_EDGE_X                = INS_HANDLE_EDGE_X, 
  INS_EDGE_y                = INS_HANDLE_EDGE_y,
  INS_EDGE_Y                = INS_HANDLE_EDGE_Y,

  INS_CORNER_xy             = INS_HANDLE_CORNER_xy, 
  INS_CORNER_Xy             = INS_HANDLE_CORNER_Xy, 
  INS_CORNER_xY             = INS_HANDLE_CORNER_xY, 
  INS_CORNER_XY             = INS_HANDLE_CORNER_XY,

  INS_ALL_RECTANGLE_EDGES   = INS_EDGE_x | INS_EDGE_X | INS_EDGE_y | INS_EDGE_Y,
  INS_ALL_RECTANGLE_CORNERS = INS_CORNER_xy | INS_CORNER_Xy | INS_CORNER_xY | INS_CORNER_XY,

  INS_EDGE_a                = INS_HANDLE_EDGE_x,
  INS_EDGE_A                = INS_HANDLE_EDGE_X, 
  INS_EDGE_r                = INS_HANDLE_EDGE_y,
  INS_EDGE_R                = INS_HANDLE_EDGE_Y,

  INS_CORNER_ar             = INS_HANDLE_CORNER_xy, 
  INS_CORNER_Ar             = INS_HANDLE_CORNER_Xy, 
  INS_CORNER_aR             = INS_HANDLE_CORNER_xY, 
  INS_CORNER_AR             = INS_HANDLE_CORNER_XY,

  INS_ALL_WEDGE_EDGES       = INS_EDGE_a | INS_EDGE_A | INS_EDGE_r | INS_EDGE_R,
  INS_ALL_WEDGE_CORNERS     = INS_CORNER_ar | INS_CORNER_Ar | INS_CORNER_aR | INS_CORNER_AR,

  INS_HANDLE_UNKNOWN        = 0xFFFFFFFF
};

// Drawing modes
enum INS_DRAWING_MODES
{
  INS_DRAW_NOMINAL,
  INS_DRAW_ACTUAL,
  INS_DRAW_TOLERANCE,
  INS_DRAW_SAMPLED_PATHS,
  INS_DRAW_SAMPLED_PATH,
  INS_DRAW_POINTS_IN_SKIP_RANGE,
  INS_DRAW_SAMPLED_POINTS,
  INS_DRAW_SAMPLED_POINT,
  INS_DRAW_INVALID_SAMPLED_POINTS,
  INS_DRAWING_MODE_UNKNOWN  = 0xFFFFFFFF
};

// Behavior flags
enum INS_SHAPE_BEHAVIOR
{
  INS_VISIBLE           = 0x1,
  INS_SELECTED          = 0x2,
  INS_SELECTABLE        = 0x4,
  INS_DRAGABLE          = 0x8,
  INS_ROTATABLE         = 0x10,
  INS_RESIZABLE         = 0x20,
  INS_ISOTROPIC         = 0x40,
  INS_SLANTABLE         = 0x80,
  INS_AUTO_ARRANGE      = 0x100,
  INS_LABELED           = 0x200,

  INS_ACTIVE            = 0x400,
  INS_FOUND             = 0x800,
  INS_INSPECTED         = 0x1000,
  INS_PASSED            = 0x2000,

  INS_QUICK_DRAW        = 0x4000,
  INS_OPTIONAL_DRAW     = 0x8000,
  INS_ACTUAL_SHAPE      = 0x10000,

  INS_USER_FLAG         = 0x10000000,

  // Internal use       
  INS_ALLOCATED         = 0x20000000,
  INS_INDEXED           = 0x40000000,
  INS_2D_ARRAY          = 0x80000000,
  INS_BEHAVIOR_UNKNOWN  = 0xFFFFFFFF
};

enum INS_MEASURE_MODE
{
  INS_THRESHOLD_MEASURE,
  INS_SOFT_THRESHOLD_MEASURE,
  INS_GRADIENT_MEASURE,
  INS_VECTOR_GRADIENT_MEASURE,
  INS_MODEL_FIT_MEASURE,
  INS_MEASURE_UNKNOWN   = 0xFFFFFFFF
};

enum INS_DIAGNOSTICS
{
  INS_BAD_OFFSET          = 0x1,
  INS_BAD_OFFSET_X        = 0x2,
  INS_BAD_OFFSET_Y        = 0x4,
  INS_BAD_DIAMETER        = 0x8,

  INS_BAD_PITCH           = 0x10,
  INS_BAD_PITCH_X         = 0x20,
  INS_BAD_PITCH_Y         = 0x40,

  INS_BAD_SHAPE           = 0x100,
  INS_BAD_COLOR           = 0x200,

  INS_NOT_FOUND           = 0x400,

  INS_DIAGNOSTIC_UNKNOWN  = 0xFFFFFFFF
};

enum INS_CALIBRATION_MODES
{
  // Raw
  INS_CALIBRATION_RAW = 0x1,

  // Camera model
  INS_CALIBRATION_INVERSE = 0x2,
  INS_CALIBRATION_SCALED = 0x4,
  INS_CALIBRATION_ANISOTROPIC = 0x8,
  INS_CALIBRATION_SKEWED = 0x10,
  INS_CALIBRATION_TILTED = 0x20,
  INS_CALIBRATION_RADIAL = 0x40,
  INS_CALIBRATION_RADIAL2 = 0x80,

  INS_CALIBRATION_CAMERA = 
  INS_CALIBRATION_INVERSE | INS_CALIBRATION_SCALED | INS_CALIBRATION_ANISOTROPIC |
  INS_CALIBRATION_SKEWED | INS_CALIBRATION_TILTED | INS_CALIBRATION_RADIAL | INS_CALIBRATION_RADIAL2,

  // Empirical model
  INS_CALIBRATION_BILINEAR = 0x100,
  INS_CALIBRATION_QUADRATIC = 0x200,
  INS_CALIBRATION_POLYNOMIAL = 0x800,

  INS_CALIBRATION_EMPIRICAL = INS_CALIBRATION_BILINEAR | INS_CALIBRATION_QUADRATIC | INS_CALIBRATION_POLYNOMIAL,

  // User-defined
  INS_CALIBRATION_USER = 0x1000,

  INS_CALIBRATION_UNDEFINED  = 0xFFFFFFFF
};

#endif //__EINSPECT_ENUM_H__
